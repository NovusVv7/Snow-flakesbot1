import asyncio
import datetime
import functools
import logging
import random
from aiogram.utils.exceptions import ChatAdminRequired
import re
from aiogram.utils.exceptions import UserIsAnAdministratorOfTheChat
import sqlite3
import time
from asyncio import sleep
from collections import defaultdict
import pyqiwip2p
from app import create_inline_keyboard, check_payment, add_donate_coins
from datetime import datetime, timedelta
from functools import wraps
from random import randint
import requests
import json
import aioschedule
import aiogram
import pytz
from aiogram import executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.handler import CancelHandler, current_handler
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.utils.callback_data import CallbackData
from aiogram.types import (ContentType, InlineKeyboardButton,
                           InlineKeyboardMarkup, ParseMode)
from aiogram.types.chat_member import ChatMemberStatus
from aiogram.utils.exceptions import Throttled
from aiogram.utils.markdown import text, escape_md
from apscheduler.schedulers.background import BackgroundScheduler
from pytz import utc

import chats
import config
import users



class ChRass(StatesGroup):
    msg = State()


class Rass(StatesGroup):
    msg = State()


class Quest(StatesGroup):
    msg = State()


class DonateState(StatesGroup):
    EnteringAmount = State()
    EnteringAmountCrypto = State()
    ChoosingCurrency = State()

class BankStates(StatesGroup):
    PUT_BANK = State()
    WITHDRAW_BANK = State()
    PUT_DEPOSIT = State()
    WITHDRAW_DEPOSIT = State()


class Answer(StatesGroup):
    text = State()


bot = aiogram.Bot(config.bot_token, parse_mode='HTML')
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)
logging.getLogger('apscheduler').setLevel(logging.ERROR)

casino_results = []
async def update_users():
    query1 = "UPDATE users SET deposit = deposit + (deposit * user_percent * 0.01);"
    query2 = "UPDATE users SET limit_spent = 0;"
    
    execute_sql(query1)
    await asyncio.sleep(1)
    execute_sql(query2)
async def scheduler():
    aioschedule.every(6).hours.do(update_users)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)
def start_bot(func):
    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        message = None
        for arg in args:
            if isinstance(arg, types.Message):
                message = arg
                break

        if not message:
            raise ValueError("Message object not found in arguments")

        users.cursor.execute("SELECT id FROM users WHERE id = ?", (message.from_user.id,))
        if not users.cursor.fetchone():
            now = datetime.now()
            users_cursor = users.cursor.execute(f"SELECT * FROM users ORDER BY user_id DESC")
            uid = 1000
            for user in users_cursor:
                uid += 1
            time_dice = current_date = datetime.now() - timedelta(seconds=18000)
            current = current_date.time()
            regdata = now.strftime("%d.%m.%Y")
            ttime = current.strftime('%H:%M:%S')
            bio = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ..."

            users.cursor.execute(
                "INSERT INTO users VALUES("
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);",
                (
                    uid, message.from_user.id, message.from_user.first_name, message.from_user.username,
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 300000, 600000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, regdata, ttime, 0, bio, 0, 1,
                    "00:00:00", 0, "1970-01-01 00:00:00", 0, 150000000000000, 0, 8, 0, 0, "1970-01-01 00:00:00",
                    0, 0, 0, 0, False, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, "1970-01-01 00:00:00", 0, 0, 0, 0, 15, 0
                )
            )
            users.connect.commit()

        return await func(*args, **kwargs)

    return wrapper


def rate_limit(limit, key=None):
    def decorator(func):
        setattr(func, 'throttling_rate_limit', limit)
        if key:
            setattr(func, 'throttling_key', key)
        return func

    return decorator


class ThrottlingMiddleware(BaseMiddleware):
    def __init__(self, limit=0, key_prefix='antiflood_'):
        self.rate_limit = limit
        self.prefix = key_prefix
        super(ThrottlingMiddleware, self).__init__()

    async def on_process_message(self, message, data):
        handler = current_handler.get()
        dispatcher = Dispatcher.get_current()

        if handler:
            limit = getattr(handler, 'throttling_rate_limit', self.rate_limit)
            key = getattr(handler, 'throttling_key', f"{self.prefix}_{handler.__name__}")
        else:
            limit = self.rate_limit
            key = f"{self.prefix}_message"

        if limit <= 0:
            return

        try:
            await dispatcher.throttle(key, rate=limit)
        except Throttled as t:
            await self.message_throttled(message, t)
            raise CancelHandler()

    async def message_throttled(self, message, throttled):
        handler = current_handler.get()

        if handler:
            key = getattr(handler, 'throttling_key', f"{self.prefix}_{handler.__name__}")
        else:
            key = f"{self.prefix}_message"

        if throttled.exceeded_count <= 2:
            await message.reply('‚ùé | –ù–µ —Å–ø–∞–º—å!')


def not_in_black_list(func):
    @wraps(func)
    async def wrapper(update, *args, **kwargs):
        if isinstance(update, types.Message):
            user_id = update.from_user.id
        elif isinstance(update, types.CallbackQuery):
            user_id = update.from_user.id
        else:
            return await func(update, *args, **kwargs)

        users.cursor.execute("SELECT black_list FROM users WHERE id=?", (user_id,))
        result = users.cursor.fetchone()
        if result:
            user_in_black_list = result[0]
            if user_in_black_list:
                return
        return await func(update, *args, **kwargs)

    return wrapper


payment_amounts = defaultdict(int)


async def execute_sql_command(message: types.Message, command: str):
    try:
        conn = sqlite3.connect("users.db")
        cursor = conn.cursor()
        cursor.execute(command)
        conn.commit()
        conn.close()
        await message.reply("–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ", parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        await message.reply(f"–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚õî\n–û—à–∏–±–∫–∞: {e}", parse_mode=ParseMode.MARKDOWN)


async def on_command_sql(message: types.Message):
    with sqlite3.connect("users.db") as conn:
        cursor = conn.cursor()
        status = cursor.execute("SELECT status from users where id = ?", (message.from_user.id,)).fetchone()

    user_id = message.from_user.id

    if str(status) == "–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞" or user_id == config.owner:
        if len(message.text.split()) > 1:
            sql_command = message.text.split(" ", 1)[1]
            await execute_sql_command(message, sql_command)
        else:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ SQL-–∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ /sql.")
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ, –≤–∞—à —Å—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞")
async def on_startup(_):
    asyncio.create_task(scheduler())

dp.register_message_handler(on_command_sql, Command("sql"))



@dp.message_handler(lambda message: message.text.lower().startswith('–∫—É—Å—å'))
async def kuss(message: types.Message):
    if not message.reply_to_message:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    user1 = message.from_user
    user2 = message.reply_to_message.from_user
    
    name1 = user1.first_name
    name2 = user2.first_name
    
    response = f"üê∂üòª | {name1} —É–∫—É—Å–∏–ª {name2}"

    if len(message.text.split()) > 1:
        additional_text = ' '.join(message.text.split()[1:])
        response += f"\n–ò –¥–æ–±–∞–≤–∏–ª: {additional_text}"
    
    await message.answer(response)
    

@dp.message_handler(lambda message: message.text.lower().startswith('–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å'))
async def kisslovs(message: types.Message):
    if not message.reply_to_message:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    user1 = message.from_user
    user2 = message.reply_to_message.from_user
    
    name1 = user1.first_name
    name2 = user2.first_name
    
    response = f"üòòüíã| {name1} –ø–æ—Ü–µ–ª–æ–≤–∞–ª {name2}"

    if len(message.text.split()) > 1:
        additional_text = ' '.join(message.text.split()[1:])
        response += f"\n–ü—Ä–æ—à–µ–ø—Ç–∞–≤: {additional_text}"
    
    await message.answer(response)
    
   
@dp.message_handler(lambda message: message.text.lower().startswith('–æ—Ç–¥–∞—Ç—å—Å—è'))
async def kisss(message: types.Message):
    if not message.reply_to_message:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    user1 = message.from_user
    user2 = message.reply_to_message.from_user
    
    name1 = user1.first_name
    name2 = user2.first_name
    
    response = f"ü•µüîû| {name1} —Å—Ç—Ä–∞—Å—Ç–Ω–æ –æ—Ç–¥–∞–ª—Å—è {name2}"

    if len(message.text.split()) > 1:
        additional_text = ' '.join(message.text.split()[1:])
        response += f"\n–û–Ω –∫—Ä–∏—á–∞–ª: {additional_text}"
    
    await message.answer(response)
    
    
@dp.message_handler(lambda message: message.text.lower().startswith('—Ä–∞–±'))
async def rab(message: types.Message):
    if not message.reply_to_message:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    user1 = message.from_user
    user2 = message.reply_to_message.from_user
    
    name1 = user1.first_name
    name2 = user2.first_name
    
    response = f"‚õì| {name1} –∑–∞–±—Ä–∞–ª –≤ —Ä–∞–±—Å—Ç–≤–æ {name2}"

    if len(message.text.split()) > 1:
        additional_text = ' '.join(message.text.split()[1:])
        response += f"\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ —á—Ç–æ –æ–Ω —Å–ª—ã—à–∞–ª: {additional_text}"
    
    await message.answer(response)    
   
@dp.message_handler(lambda message: message.text.lower().startswith('—É–±–∏—Ç—å'))
async def smert(message: types.Message):
    if not message.reply_to_message:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    user1 = message.from_user
    user2 = message.reply_to_message.from_user
    
    name1 = user1.first_name
    name2 = user2.first_name
    
    response = f"üíÄ| {name1} —É–±–∏–ª {name2}"

    if len(message.text.split()) > 1:
        additional_text = ' '.join(message.text.split()[1:])
        response += f"\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ —á—Ç–æ –æ–Ω —Å–ª—ã—à–∞–ª: {additional_text}"
    
    await message.answer(response)       
    
@dp.message_handler(lambda message: message.text.lower().startswith('–∏–∑–±–∏—Ç—å'))
async def izbet(message: types.Message):
    if not message.reply_to_message:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    user1 = message.from_user
    user2 = message.reply_to_message.from_user
    
    name1 = user1.first_name
    name2 = user2.first_name
    
    response = f"ü§ïüíÄ | {name1} –∏–∑–±–∏–ª {name2}"

    if len(message.text.split()) > 1:
        additional_text = ' '.join(message.text.split()[1:])
        response += f"\n–î–æ –æ—Ç–∫–ª—é—á–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º {name2} —Å–ª—ã—à–∞–ª: {additional_text}"
    
    await message.answer(response)           
    
@dp.message_handler(lambda message: message.text.lower().startswith('–æ—Ç–ª–∏–∑–∞—Ç—å'))
async def otlis(message: types.Message):
    if not message.reply_to_message:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    user1 = message.from_user
    user2 = message.reply_to_message.from_user
    
    name1 = user1.first_name
    name2 = user2.first_name
    
    response = f"üëÖ | {name1} –æ—Ç–ª–∏–∑–∞–ª —É {name2}"

    if len(message.text.split()) > 1:
        additional_text = ' '.join(message.text.split()[1:])
        response += f"\n–í –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–Ω –∫—Ä–∏—á–∞–ª: {additional_text}"
    
    await message.answer(response)   
    
            
@dp.message_handler(lambda message: message.text.lower().startswith('–æ—Ç—Å–æ—Å–∞—Ç—å'))
async def otis(message: types.Message):
    if not message.reply_to_message:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    user1 = message.from_user
    user2 = message.reply_to_message.from_user
    
    name1 = user1.first_name
    name2 = user2.first_name
    
    response = f"üçÜü•µ | {name1} –æ—Ç—Å–æ—Å–∞–ª —É {name2}"

    if len(message.text.split()) > 1:
        additional_text = ' '.join(message.text.split()[1:])
        response += f"\n–í –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–Ω –∫—Ä–∏—á–∞–ª: {additional_text}"
    
    await message.answer(response)           
    
                        
@dp.message_handler(lambda message: message.text.lower().startswith('–ø–∏–≤–æ'))
async def otipivos(message: types.Message):
    if not message.reply_to_message:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    user1 = message.from_user
    user2 = message.reply_to_message.from_user
    
    name1 = user1.first_name
    name2 = user2.first_name
    
    response = f"üçª | {name1} –±—É—Ö–Ω—É–ª —Å {name2}"

    if len(message.text.split()) > 1:
        additional_text = ' '.join(message.text.split()[1:])
        response += f"\n–ê —Ç–∞–∫-–∂–µ, –≤—Å—Ç–∞–≤–∏–ª —Å–≤–æ–∏ —Ç—Ä–∏ –∫–æ–ø–µ–π–∫–∏: {additional_text}"
    
    await message.answer(response)            
    

@dp.message_handler(lambda message: message.text.lower().startswith('–ø–æ–≥–ª–∞–¥–∏—Ç—å'))
async def wllsb(message: types.Message):
    if not message.reply_to_message:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    user1 = message.from_user
    user2 = message.reply_to_message.from_user
    
    name1 = user1.first_name
    name2 = user2.first_name
    
    response = f"üíì | {name1} –ø–æ–≥–ª–∞–¥–∏–ª {name2}"

    if len(message.text.split()) > 1:
        additional_text = ' '.join(message.text.split()[1:])
        response += f"\n–°–∫–∞–∑–∞–≤: {additional_text}"
    
    await message.answer(response)   
    
@dp.message_handler(lambda message: message.text.lower().startswith('–ø–æ—Å–ª–∞—Ç—å'))
async def wllsb(message: types.Message):
    if not message.reply_to_message:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    user1 = message.from_user
    user2 = message.reply_to_message.from_user
    
    name1 = user1.first_name
    name2 = user2.first_name
    
    response = f"ü§¨ | {name1} –¥–∞–ª–µ–∫–æ –ø–æ—Å–ª–∞–ª {name2}"

    if len(message.text.split()) > 1:
        additional_text = ' '.join(message.text.split()[1:])
        response += f"\n#$!@: {additional_text}"
    
    await message.answer(response)                  

@dp.message_handler(lambda message: message.text.lower().startswith('—Ä–ø'))
async def handle_rp_command(message: types.Message):
    respoonse = "–°–ø–∏—Å–æ–∫ —Ä–ø –∫–æ–º–∞–Ω–¥:\n\n" \
               "–ü–æ—Ü–µ–ª–æ–≤–∞—Ç—å üíã\n" \
               "–£–±–∏—Ç—å üíÄ\n" \
               "–ü–∏–≤–æ üçª\n" \
               "–†–∞–± ‚õì\n" \
               "–ö—É—Å—å üê∂\n" \
               "–û—Ç–¥–∞—Ç—å—Å—è üíò\n" \
               "–û—Ç—Å–æ—Å–∞—Ç—å üîû\n" \
               "–û—Ç–ª–∏–∑–∞—Ç—å üîû\n" \
               "–ü–æ–≥–ª–∞–¥–∏—Ç—å ü•∞\n" \
               "–ò–∑–±–∏—Ç—å ü§¨\n" \
               "–ü–æ—Å–ª–∞—Ç—å ü§¨"

    await message.reply(respoonse)

@dp.message_handler(
    lambda t: t.text.startswith("–ø—Ä–æ–º–æ —Å–æ–∑–¥–∞—Ç—å") or t.text.startswith("–ü—Ä–æ–º–æ —Å–æ–∑–¥–∞—Ç—å") or t.text.startswith(
        "—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ") or t.text.startswith("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ"))
@not_in_black_list
@start_bot
async def startswith(message):
    user_status = users.cursor.execute(f"SELECT status FROM users WHERE id = {message.from_user.id}").fetchone()
    user_status = user_status[0]
    user_name = users.cursor.execute(f"SELECT name from users where id = {message.from_user.id}").fetchone()
    balance = users.cursor.execute(f"SELECT balance from users where id = {message.from_user.id}").fetchone()
    balance = round(int(balance[0]))
    balance2 = '{:,}'.format(balance).replace(',', '.')
    user_name = user_name[0]
    try:
        name = message.text.split()[2]
        akt = int(message.text.split()[3])
        dengi5 = message.text.split()[4]
    except:
        if user_status != "–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞":
            return
        else:
            await message.answer(f'‚ùóÔ∏è–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: –ø—Ä–æ–º–æ —Å–æ–∑–¥–∞—Ç—å [–∏–º—è] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç.] [—Å—É–º–º–∞ (–Ω–∞ –æ–¥–Ω–æ–≥–æ)]')
    users.cursor.execute(f"SELECT promo_name FROM promiki WHERE promo_name = '{name}'")
    akt2 = '{:,}'.format(akt).replace(',', '.')
    dengi4 = (dengi5).replace(' ', '').replace('k', '000').replace('–µ', 'e').replace('–∫', '000').replace(',',
                                                                                                         '').replace(
        '.', '').replace("‚ÇΩ", "").replace('–º', '000000').replace('m', '000000')
    dengi3 = float(dengi4)
    dengi = int(dengi3)
    denfi = int(dengi * akt)
    denfi2 = '{:,}'.format(denfi).replace(',', '.')
    dengi2 = '{:,}'.format(dengi).replace(',', '.')
    if users.cursor.fetchone() != None:
        return await message.answer(f'–ò–º—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ "{name}" –∑–∞–Ω—è—Ç–æ.')
    if akt < 2:
        return await message.answer(f'‚ùå –ò–∑–≤–∏–Ω–∏, –Ω–æ –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã, –≥–¥–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π 1')
    if dengi < 100:
        return await message.answer(
            f'‚ùå –ò–∑–≤–∏–Ω–∏, –Ω–æ –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã, –≥–¥–µ –Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞—é—Ç: <code>100</code>‚ÇΩ')
    if user_status == "–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞" or user_status == "–û—Å–æ–±—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
        users.cursor.execute(f"INSERT INTO promiki VALUES ({message.from_user.id}, '{name}', {dengi}, {akt}, 0)")
        users.connect.commit()
        return await message.answer(
            f'‚úîÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥: ¬´<code>{name}</code>¬ª\n‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: <code>{akt2}</code>\nüë• –ù–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{dengi2}</code>$\nüßæ –° –±–∞–ª–∞–Ω—Å–∞ –±—ã–ª–æ —Å–Ω—è—Ç–æ: <code>{denfi2}</code>‚ÇΩ')


@dp.message_handler(lambda t: t.text.startswith("–ü—Ä–æ–º–æ") or t.text.startswith("–ø—Ä–æ–º–æ"))
@not_in_black_list
@start_bot
async def startswith(message):
    channel_id = -1001600332618

    try:
        chat_member = await bot.get_chat_member(channel_id, message.from_user.id)
    except:
        return await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")

    if chat_member.status not in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
        return await message.answer(
            "‚ùå üòî –û—à–∏–±–∫–∞! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª @mgldev üéÆüí° –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º!")

    try:
        vvod = message.text.split()[1]
    except:
        return await message.answer(f'‚ùå –í—ã –Ω–µ –≤–≤–µ–ª–∏ –∏–º—è –ø—Ä–æ–º–æ–∫–æ–¥–∞')

    user_exists = users.cursor.execute("SELECT * FROM users WHERE id = ?", (message.from_user.id,)).fetchone()

    if not user_exists:
        return await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

    promo_exists = users.cursor.execute("SELECT promo_name FROM promiki WHERE promo_name = ?", (vvod,)).fetchone()

    if not promo_exists:
        return await message.answer('‚ùå –î–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')

    promo_activated = users.cursor.execute("SELECT activation FROM promo WHERE user_id = ? AND promo_name = ?",
                                           (message.from_user.id, vvod)