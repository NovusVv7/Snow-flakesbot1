import logging
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import sqlite3
import random
import config
from contextlib import contextmanager
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('snowflakes.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS users
             (user_id INTEGER PRIMARY KEY, 
              username TEXT,
              snowflakes INTEGER DEFAULT 0,
              banned BOOLEAN DEFAULT FALSE)''')
conn.commit()

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CREATOR_ID = config.CREATOR_ID
active_bets = {}
PAYOUTS = {
    1: 35,   # –ü—Ä—è–º–∞—è —Å—Ç–∞–≤–∫–∞
    2: 17,   # –°–ø–ª–∏—Ç
    3: 11,   # –°—Ç—Ä–∏—Ç
    4: 8,    # –£–≥–æ–ª
    6: 5,    # –õ–∏–Ω–∏—è
    12: 2,   # –î—é–∂–∏–Ω—ã/–∫–æ–ª–æ–Ω–∫–∏
    18: 1    # –ß–µ—Ç/–Ω–µ—á–µ—Ç, –∫—Ä–∞—Å–Ω–æ–µ/—á–µ—Ä–Ω–æ–µ
}

@contextmanager
def db_transaction():
    try:
        yield
        conn.commit()
    except Exception as e:
        conn.rollback()
        logging.error(f"Database error: {str(e)}")

def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.full_name
    try:
        with db_transaction():
            cursor.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
            update.message.reply_text("‚ùÑÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Snowflake Bot! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
                                    "üíé –ë–∞–ª–∞–Ω—Å/–ë - –ø–æ–∫–∞–∑–∞—Ç—å —Å–Ω–µ–∂–∏–Ω–∫–∏\n"
                                    "üé∞ –†—É–ª–µ—Ç–∫–∞ [—Å—É–º–º–∞] —á–∏—Å–ª–∞... - —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É\n"
                                    "üèÅ –ì–æ - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É\n"
                                    "üéÅ –ü–µ—Ä–µ–¥–∞—Ç—å @—é–∑–µ—Ä —Å—É–º–º–∞\n"
                                    "‚ùå –û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É")
    except Exception as e:
        logging.error(f"Start error: {str(e)}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

def balance(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    try:
        with db_transaction():
            user = cursor.execute("SELECT username, snowflakes FROM users WHERE user_id=?", (user_id,)).fetchone()
            if user:
                username = user[0] or "–ë–µ–∑ –Ω–∏–∫–∞"
                update.message.reply_text(
                    f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {username}\n"
                    f"‚ùÑÔ∏è –ë–∞–ª–∞–Ω—Å: {user[1]} —Å–Ω–µ–∂–∏–Ω–æ–∫"
                )
            else:
                update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
    except Exception as e:
        logging.error(f"Balance error: {str(e)}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")

def transfer(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    args = update.message.text.split()[1:]

    if len(args) != 2 or not args[1].isdigit():
        update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: –ü–µ—Ä–µ–¥–∞—Ç—å @—é–∑–µ—Ä —Å—É–º–º–∞")
        return

    recipient_username = args[0].lstrip('@')
    amount = int(args[1])

    if amount <= 0:
        update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        return

    try:
        with db_transaction():
            sender = cursor.execute("SELECT snowflakes, banned FROM users WHERE user_id=?", (user_id,)).fetchone()
            if not sender:
                update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
                return
            if sender[1]:
                update.message.reply_text("‚õî –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!")
                return
            if sender[0] < amount:
                update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω–µ–∂–∏–Ω–æ–∫")
                return

            recipient = cursor.execute("SELECT user_id FROM users WHERE username=?", (recipient_username,)).fetchone()
            if not recipient:
                update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            cursor.execute("UPDATE users SET snowflakes = snowflakes - ? WHERE user_id=?", (amount, user_id))
            cursor.execute("UPDATE users SET snowflakes = snowflakes + ? WHERE user_id=?", (amount, recipient[0]))
            update.message.reply_text(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ {amount} —Å–Ω–µ–∂–∏–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{recipient_username}")

    except Exception as e:
        logging.error(f"Transfer error: {str(e)}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤")

def roulette(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    args = update.message.text.split()[1:]

    if not args:
        update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: –†—É–ª–µ—Ç–∫–∞ [—Å—Ç–∞–≤–∫–∞] —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n–ü—Ä–∏–º–µ—Ä: –†—É–ª–µ—Ç–∫–∞ 20000 2 4 6 9 14...")
        return

    try:
        bet = int(args[0])
        if bet < 10:
            update.message.reply_text("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 10 —Å–Ω–µ–∂–∏–Ω–æ–∫")
            return
    except ValueError:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏")
        return

    numbers = []
    for item in args[1:]:
        if item.isdigit():
            num = int(item)
            if 0 <= num <= 36:
                numbers.append(num)
            else:
                update.message.reply_text(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ: {item}")
                return
        else:
            update.message.reply_text(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {item}")
            return

    if not numbers:
        update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏")
        return

    active_bets[user_id] = {
        'bet': bet,
        'numbers': numbers,
        'payout': 35 // len(numbers)
    }

    update.message.reply_text(
        f"‚ùÑÔ∏è –°—Ç–∞–≤–∫–∞ {bet} —Å–Ω–µ–∂–∏–Ω–æ–∫ –Ω–∞ —á–∏—Å–ª–∞: {', '.join(map(str, numbers))}\n"
        f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x{active_bets[user_id]['payout']}\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ '–ì–û' —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É –∏–ª–∏ '–û–¢–ú–ï–ù–ê' –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )

def start_roulette(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id not in active_bets:
        update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫")
        return

    bet_data = active_bets.pop(user_id)

    try:
        with db_transaction():
            user = cursor.execute("SELECT snowflakes, banned FROM users WHERE user_id=?", (user_id,)).fetchone()
            if not user:
                update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
                return
            if user[1]:
                update.message.reply_text("‚õî –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!")
                return
            if user[0] < bet_data['bet']:
                update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω–µ–∂–∏–Ω–æ–∫")
                return

            cursor.execute("UPDATE users SET snowflakes = snowflakes - ? WHERE user_id=?", (bet_data['bet'], user_id))
            
            result = random.randint(0, 36)
            red_numbers = [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36]
            color = '–∫—Ä–∞—Å–Ω–æ–µ' if result in red_numbers else '—á–µ—Ä–Ω–æ–µ' if result !=0 else '–∑–µ–ª–µ–Ω–æ–µ'

            if result in bet_data['numbers']:
                win_amount = bet_data['bet'] * bet_data['payout']
                cursor.execute("UPDATE users SET snowflakes = snowflakes + ? WHERE user_id=?", (win_amount, user_id))
                message = (
                    f"üéâ –í–´–ò–ì–†–´–®!\n"
                    f"–í—ã–ø–∞–ª–æ: {result} ({color})\n"
                    f"üí∞ +{win_amount} —Å–Ω–µ–∂–∏–Ω–æ–∫!"
                )
            else:
                message = (
                    f"üíî –ü–†–û–ò–ì–†–´–®\n"
                    f"–í—ã–ø–∞–ª–æ: {result} ({color})\n"
                    f"‚ùÑÔ∏è -{bet_data['bet']} —Å–Ω–µ–∂–∏–Ω–æ–∫"
                )

            update.message.reply_text(message)

    except Exception as e:
        logging.error(f"Roulette error: {str(e)}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ")

def cancel_bet(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id in active_bets:
        del active_bets[user_id]
        update.message.reply_text("‚ùÑÔ∏è –°—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
    else:
        update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫")

def add_snowflakes(update: Update, context: CallbackContext):
    if update.effective_user.id != CREATOR_ID:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    args = context.args
    if len(args) < 2:
        update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /add_snowflakes @username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        return

    username = args[0].lstrip('@')
    try:
        amount = int(args[1])
        if amount <= 0:
            update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
    except ValueError:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–Ω–µ–∂–∏–Ω–æ–∫.")
        return

    try:
        with db_transaction():
            user = cursor.execute(
                "SELECT user_id FROM users WHERE username=?", 
                (username,)
            ).fetchone()
            
            if not user:
                update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            cursor.execute(
                "UPDATE users SET snowflakes = snowflakes + ? WHERE user_id=?",
                (amount, user[0])
            )

            update.message.reply_text(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ {amount} —Å–Ω–µ–∂–∏–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}.")
            
            try:
                context.bot.send_message(
                    chat_id=user[0], 
                    text=f"üéÅ –í–∞–º –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} —Å–Ω–µ–∂–∏–Ω–æ–∫!"
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")

def main():
    updater = Updater(config.TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.regex(re.compile(r'^(–±–∞–ª–∞–Ω—Å|–±)$', re.IGNORECASE)), balance))
    dp.add_handler(MessageHandler(Filters.regex(r'^—Ä—É–ª–µ—Ç–∫–∞ '), roulette))
    dp.add_handler(MessageHandler(Filters.regex(r'^–≥–æ$'), start_roulette))
    dp.add_handler(MessageHandler(Filters.regex(r'^–æ—Ç–º–µ–Ω–∞$'), cancel_bet))
    dp.add_handler(MessageHandler(Filters.regex(r'^–ø–µ—Ä–µ–¥–∞—Ç—å '), transfer))
    dp.add_handler(CommandHandler(
        "add_snowflakes", 
        add_snowflakes, 
        filters=Filters.user(user_id=CREATOR_ID)
    ))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()