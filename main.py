import os
import logging
import json
import random
import asyncio
from aiogram import Bot, Dispatcher, executor, types

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã
TOKEN = os.getenv("API_TOKEN")
if not TOKEN:
    logging.error("API_TOKEN environment variable not set!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(TOKEN)
dp = Dispatcher(bot)

DB_FILE = "db.json"
ADMIN_ID = 6359584002

def load_db():
    try:
        if os.path.exists(DB_FILE):
            with open(DB_FILE, "r") as f:
                return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        logging.warning("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ë–î. –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è.")
    return {"users": {}, "banned": [], "promo_codes": {}}

def save_db(db):
    try:
        with open(DB_FILE, "w") as f:
            json.dump(db, f, indent=4)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ë–î: {e}")

db = load_db()

# –û–±–Ω–æ–≤–ª—è–µ–º username –∫–∞–∂–¥—ã–π —Ä–∞–∑
@dp.message_handler()
async def update_user(message: types.Message):
    user_id = str(message.from_user.id)
    username = message.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"
    if user_id in db.get("banned", []):
        return
    if user_id not in db["users"]:
        db["users"][user_id] = {"snowflakes": 1000, "username": username}
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}! –£ –≤–∞—Å 1000 —Å–Ω–µ–∂–∏–Ω–æ–∫. ‚ùÑÔ∏è")
    else:
        db["users"][user_id]["username"] = username
    save_db(db)

# –†—É–ª–µ—Ç–∫–∞
@dp.message_handler(lambda m: m.text.lower().startswith(("–≥–æ", "—Ä—É–ª–µ—Ç–∫–∞")))
async def roulette(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id in db["banned"]:
        await message.answer("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    if user_id not in db["users"]:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ '—Å—Ç–∞—Ä—Ç'")
        return

    parts = message.text.lower().split()
    if len(parts) < 2:
        await message.answer("–ü—Ä–∏–º–µ—Ä: –≥–æ 17 –∏–ª–∏ –≥–æ 5-20 (–º–∏–Ω–∏–º—É–º 50 —Å–Ω–µ–∂–∏–Ω–æ–∫)")
        return

    bet_input = parts[1]
    bet_parts = bet_input.split("-")

    try:
        if len(bet_parts) == 1:
            bet = int(bet_parts[0])
            if bet < 50:
                raise ValueError
            bet_type = "single"
        elif len(bet_parts) == 2:
            bet = int(bet_parts[0])
            start, end = int(bet_parts[0]), int(bet_parts[1])
            if bet < 50 or not (0 <= start <= end <= 36):
                raise ValueError
            bet_type = "range"
        else:
            raise ValueError
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω. –ü—Ä–∏–º–µ—Ä: –≥–æ 17 –∏–ª–∏ –≥–æ 10-20")
        return

    if db["users"][user_id]["snowflakes"] < bet:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω–µ–∂–∏–Ω–æ–∫ ‚ùÑÔ∏è")
        return

    await message.answer("–†—É–ª–µ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
    await asyncio.sleep(5)

    result = random.randint(0, 36)
    color = "üü£" if result == 0 else ("‚ö´" if result % 2 == 0 else "üî¥")
    winnings = 0

    if bet_type == "single" and result == bet:
        winnings = bet * 36
    elif bet_type == "range" and start <= result <= end:
        winnings = bet * 2

    if winnings > 0:
        db["users"][user_id]["snowflakes"] += winnings
        msg = f"{color} –í—ã–ø–∞–ª–æ: {result}\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} —Å–Ω–µ–∂–∏–Ω–æ–∫! ‚ùÑÔ∏è"
    else:
        db["users"][user_id]["snowflakes"] -= bet
        msg = f"{color} –í—ã–ø–∞–ª–æ: {result}\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet} —Å–Ω–µ–∂–∏–Ω–æ–∫."

    save_db(db)
    await message.answer(msg)

# –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(lambda m: m.text.lower() in ["–∞–¥–º–∏–Ω", "–ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"])
async def admin_panel(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω! ‚öôÔ∏è")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
@dp.message_handler(lambda m: m.text.lower().startswith("—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"))
async def create_promo(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–ù–µ—Ç –ø—Ä–∞–≤.")
        return

    parts = message.text.split()
    if len(parts) < 4:
        await message.reply("–§–æ—Ä–º–∞—Ç: —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ [—Å–Ω–µ–∂–∏–Ω–∫–∏] [–∫–æ–ª-–≤–æ]")
        return

    try:
        snowflakes = int(parts[2])
