import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler
import sqlite3
import random
import config
from contextlib import contextmanager
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('snowflakes.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS users
             (user_id INTEGER PRIMARY KEY, 
              username TEXT,
              snowflakes INTEGER DEFAULT 0,
              banned BOOLEAN DEFAULT FALSE)''')
conn.commit()

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
CREATOR_ID = config.CREATOR_ID
active_bets = {}
PAYOUTS = {
    1: 35,   # –ü—Ä—è–º–∞—è —Å—Ç–∞–≤–∫–∞
    2: 17,   # –°–ø–ª–∏—Ç
    3: 11,   # –°—Ç—Ä–∏—Ç
    4: 8,    # –£–≥–æ–ª
    6: 5,    # –õ–∏–Ω–∏—è
    12: 2,   # –î—é–∂–∏–Ω—ã/–∫–æ–ª–æ–Ω–∫–∏
    18: 1    # –ß–µ—Ç/–Ω–µ—á–µ—Ç, –∫—Ä–∞—Å–Ω–æ–µ/—á–µ—Ä–Ω–æ–µ
}

@contextmanager
def db_transaction():
    try:
        yield
        conn.commit()
    except Exception as e:
        conn.rollback()
        logging.error(f"Database error: {str(e)}")

def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.full_name
    try:
        with db_transaction():
            cursor.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
            update.message.reply_text("‚ùÑÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Snowflake Bot! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
                                    "üíé –ë–∞–ª–∞–Ω—Å/–ë - –ø–æ–∫–∞–∑–∞—Ç—å —Å–Ω–µ–∂–∏–Ω–∫–∏\n"
                                    "üé∞ –†—É–ª–µ—Ç–∫–∞ [—Å—É–º–º–∞] —á–∏—Å–ª–∞... - —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É\n"
                                    "üèÅ –ì–æ - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É\n"
                                    "üéÅ –ü–µ—Ä–µ–¥–∞—Ç—å @—é–∑–µ—Ä —Å—É–º–º–∞\n"
                                    "‚ùå –û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É")
    except Exception as e:
        logging.error(f"Start error: {str(e)}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

def balance(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    try:
        with db_transaction():
            user = cursor.execute("SELECT username, snowflakes FROM users WHERE user_id=?", (user_id,)).fetchone()
            if user:
                username = user[0] or "–ë–µ–∑ –Ω–∏–∫–∞"
                update.message.reply_text(
                    f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {username}\n"
                    f"‚ùÑÔ∏è –ë–∞–ª–∞–Ω—Å: {user[1]} —Å–Ω–µ–∂–∏–Ω–æ–∫"
                )
            else:
                update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
    except Exception as e:
        logging.error(f"Balance error: {str(e)}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞) ...

def main():
    updater = Updater(config.TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.regex(re.compile(r'^(–±–∞–ª–∞–Ω—Å|–±)$', re.IGNORECASE)), balance))
    dp.add_handler(MessageHandler(Filters.regex(r'^—Ä—É–ª–µ—Ç–∫–∞ '), roulette))
    dp.add_handler(MessageHandler(Filters.regex(r'^–≥–æ$'), start_roulette))
    dp.add_handler(MessageHandler(Filters.regex(r'^–æ—Ç–º–µ–Ω–∞$'), cancel_bet))
    dp.add_handler(MessageHandler(Filters.regex(r'^–ø–µ—Ä–µ–¥–∞—Ç—å '), transfer))
    dp.add_handler(CommandHandler(
        "add_snowflakes", 
        add_snowflakes, 
        filters=Filters.user(user_id=CREATOR_ID)
    ))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()