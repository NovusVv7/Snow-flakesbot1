from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
import sqlite3, random, time

API_TOKEN = '7561318621:AAHLIMv1cQPXSkBYWkFCeys5XsXg2c4M3fc'
CREATOR_ID =6359584002  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class GameState(StatesGroup):
    roulette_waiting = State()
    mines_settings = State()
    mines_playing = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("data.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    snowflakes INTEGER DEFAULT 0,
    last_bonus INTEGER DEFAULT 0
)
""")
conn.commit()

# –†–∞–±–æ—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º
BONUS_INTERVAL = 5 * 60 * 60  # 5 —á–∞—Å–æ–≤

def get_balance(user_id):
    cursor.execute("SELECT snowflakes FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 0

def update_balance(user_id, amount):
    cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,))
    if cursor.fetchone():
        cursor.execute("UPDATE users SET snowflakes = snowflakes + ? WHERE user_id = ?", (amount, user_id))
    else:
        cursor.execute("INSERT INTO users (user_id, snowflakes) VALUES (?, ?)", (user_id, amount))
    conn.commit()

def try_give_bonus(user_id):
    now = int(time.time())
    cursor.execute("SELECT last_bonus FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    last = result[0] if result else 0
    
    if now - last >= BONUS_INTERVAL:
        bonus = random.randint(5000, 20000)
        update_balance(user_id, bonus)
        cursor.execute("UPDATE users SET last_bonus = ? WHERE user_id = ?", (now, user_id))
        conn.commit()
        return bonus
    return None

@dp.message_handler(commands=['start'])
async def cmd_start(message: Message):
    update_balance(message.from_user.id, 5000)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–ø–∏—à–∏—Ç–µ '–≥–æ' –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ '–º–∏–Ω—ã' –¥–ª—è –∏–≥—Ä—ã.")

@dp.message_handler(lambda m: m.text.lower() == '–±')
async def show_balance(message: Message):
    bonus = try_give_bonus(message.from_user.id)
    balance = get_balance(message.from_user.id)
    if bonus:
        await message.answer(f"–ë–∞–ª–∞–Ω—Å: {balance} —Å–Ω–µ–∂–∏–Ω–æ–∫\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å: +{bonus}!")
    else:
        await message.answer(f"–ë–∞–ª–∞–Ω—Å: {balance} —Å–Ω–µ–∂–∏–Ω–æ–∫\n–ë–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑ –≤ 5 —á–∞—Å–æ–≤.")

@dp.message_handler(lambda m: m.text.lower() == "–≥–æ")
async def go_command(message: Message):
    await GameState.roulette_waiting.set()
    await message.answer("–†–µ–∂–∏–º —Ä—É–ª–µ—Ç–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É (–ø—Ä–∏–º–µ—Ä: 100 red)")

@dp.message_handler(state=GameState.roulette_waiting)
async def handle_roulette_bet(message: Message, state: FSMContext):
    parts = message.text.lower().split()
    if len(parts) < 2:
        await message.reply("–ü—Ä–∏–º–µ—Ä —Å—Ç–∞–≤–∫–∏: 100 red")
        return
    
    try:
        amount = int(parts[0])
        choice = parts[1]
        
        if get_balance(message.from_user.id) < amount:
            await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω–µ–∂–∏–Ω–æ–∫.")
            return

        win = False
        result = random.choice(["red", "black"])
        if choice == result:
            win = True

        if win:
            update_balance(message.from_user.id, amount)
            await message.reply(f"–í—ã–ø–∞–ª–æ {result}. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! +{amount}")
        else:
            update_balance(message.from_user.id, -amount)
            await message.reply(f"–í—ã–ø–∞–ª–æ {result}. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. -{amount}")
        await state.finish()
    except:
        await message.reply("–û—à–∏–±–∫–∞ –≤ —Å—Ç–∞–≤–∫–µ.")

@dp.message_handler(lambda m: m.text.lower().startswith("–ø–µ—Ä–µ–¥–∞—Ç—å "))
async def transfer_currency(message: Message):
    try:
        parts = message.text.lower().split()
        if len(parts) < 3:
            await message.reply("–§–æ—Ä–º–∞—Ç: –ø–µ—Ä–µ–¥–∞—Ç—å [ID] [—Å—É–º–º–∞]")
            return
        
        recipient_id = int(parts[1])
        amount = int(parts[2])
        
        if amount <= 0:
            await message.reply("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return
            
        sender_id = message.from_user.id
        if sender_id == recipient_id:
            await message.reply("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å–µ–±–µ!")
            return
            
        if get_balance(sender_id) < amount:
            await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω–µ–∂–∏–Ω–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
            return
            
        update_balance(sender_id, -amount)
        update_balance(recipient_id, amount)
        await message.reply(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ {amount} —Å–Ω–µ–∂–∏–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")

# –ò–≥—Ä–∞ "–ú–∏–Ω—ã"
@dp.message_handler(lambda m: m.text.lower() == "–º–∏–Ω—ã")
async def mines_game(message: Message):
    await GameState.mines_settings.set()
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã '–ú–∏–Ω—ã':\n"
                        "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫ –∏ –º–∏–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n"
                        "–ü—Ä–∏–º–µ—Ä: 1000 25 5 (—Å—Ç–∞–≤–∫–∞ 1000, –ø–æ–ª–µ 5x5, 5 –º–∏–Ω)")

@dp.message_handler(state=GameState.mines_settings)
async def setup_mines_game(message: Message, state: FSMContext):
    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.reply("–ù—É–∂–Ω–æ 3 —á–∏—Å–ª–∞: —Å—Ç–∞–≤–∫–∞, –∫–ª–µ—Ç–∫–∏, –º–∏–Ω—ã")
            return
            
        bet, cells, mines = map(int, parts)
        if bet <= 0 or cells <= 0 or mines <= 0:
            await message.reply("–í—Å–µ —á–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏!")
            return
            
        if mines >= cells:
            await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–µ—Ç–æ–∫!")
            return
            
        if get_balance(message.from_user.id) < bet:
            await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω–µ–∂–∏–Ω–æ–∫ –¥–ª—è —Å—Ç–∞–≤–∫–∏!")
            return
            
        await state.update_data(bet=bet, cells=cells, mines=mines, opened=[])
        await GameState.mines_playing.set()
        await show_mines_field(message, state)
    except:
        await message.reply("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞!")

async def show_mines_field(message: Message, state: FSMContext):
    data = await state.get_data()
    cells = data['cells']
    opened = data.get('opened', [])
    
    field = ""
    for i in range(cells):
        if i in opened:
            field += "üü© "
        else:
            field += "‚¨ú "
        if (i + 1) % 5 == 0:
            field += "\n"
    
    await message.answer(f"–ü–æ–ª–µ ({cells} –∫–ª–µ—Ç–æ–∫, {data['mines']} –º–∏–Ω):\n{field}\n"
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É (1-{cells})")

@dp.message_handler(state=GameState.mines_playing)
async def process_mines_move(message: Message, state: FSMContext):
    try:
        cell = int(message.text) - 1
        data = await state.get_data()
        
        if cell < 0 or cell >= data['cells']:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏!")
            return
            
        if cell in data.get('opened', []):
            await message.reply("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞!")
            return
            
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ö–æ–¥–µ
        if 'mines_positions' not in data:
            mines_positions = random.sample(range(data['cells']), data['mines'])
            await state.update_data(mines_positions=mines_positions)
        else:
            mines_positions = data['mines_positions']
        
        opened = data.get('opened', [])
        opened.append(cell)
        await state.update_data(opened=opened)
        
        if cell in mines_positions:
            update_balance(message.from_user.id, -data['bet'])
            await message.answer("üí• –í—ã –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ –º–∏–Ω—É –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!")
            await state.finish()
        else:
            if len(opened) == data['cells'] - data['mines']:
                win_amount = data['bet'] * 2
                update_balance(message.from_user.id, win_amount)
                await message.answer(f"üéâ –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –≤—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}!")
                await state.finish()
            else:
                await show_mines_field(message, state)
    except:
        await message.reply("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏!")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)