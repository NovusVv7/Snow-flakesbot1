import sqlite3
import random
import time
from telebot import TeleBot, types

TOKEN = "7650141860:AAGYFa2RnmgP8-djuctPE2mrKx8j357gX3U"
ADMIN_ID = 6359584002
bot = TeleBot(TOKEN)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏
RED_NUMS = {1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36}
BLACK_NUMS = set(range(1, 37)) - RED_NUMS
ROULETTE_MULTI_BETS = {
    1: 36, 2: 18, 3: 12, 4: 9, 6: 6, 12: 3
}

def init_db():
    conn = sqlite3.connect("waifubot.db")
    c = conn.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        icecream INTEGER DEFAULT 0,
        waifu TEXT DEFAULT ''
    )""")
    c.execute("""CREATE TABLE IF NOT EXISTS promocodes (
        code TEXT PRIMARY KEY,
        reward INTEGER,
        used_by TEXT DEFAULT ''
    )""")
    c.execute("""CREATE TABLE IF NOT EXISTS girls (
        user_id INTEGER PRIMARY KEY,
        number INTEGER,
        income INTEGER DEFAULT 0,
        hunger INTEGER DEFAULT 0
    )""")
    conn.commit()
    conn.close()

def get_balance(user_id):
    conn = sqlite3.connect("waifubot.db")
    c = conn.cursor()
    c.execute("SELECT icecream FROM users WHERE id = ?", (user_id,))
    row = c.fetchone()
    conn.close()
    return row[0] if row else 0

def update_balance(user_id, amount):
    conn = sqlite3.connect("waifubot.db")
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (id) VALUES (?)", (user_id,))
    c.execute("UPDATE users SET icecream = icecream + ? WHERE id = ?", (amount, user_id))
    conn.commit()
    conn.close()

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

@bot.message_handler(func=lambda m: m.text.lower().startswith(('—Ä—É–ª–µ—Ç–∫–∞', '—Å—Ç–∞–≤–∫–∞')))
def roulette_handler(msg):
    try:
        args = msg.text.split()[1:]
        if len(args) < 2:
            return bot.reply_to(msg, "üåÄ –§–æ—Ä–º–∞—Ç: –†—É–ª–µ—Ç–∫–∞ [–°—É–º–º–∞] [–ß–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª]\n–ü—Ä–∏–º–µ—Ä: –†—É–ª–µ—Ç–∫–∞ 200 4 8 36")

        uid = msg.from_user.id
        bet_amount = int(args[0])
        numbers = list(map(int, args[1:]))
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if bet_amount < 10:
            return bot.reply_to(msg, "‚ùó –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 10 üç¶")
        if any(n < 0 or n > 36 for n in numbers):
            return bot.reply_to(msg, "‚ùå –ß–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 36!")
        if len(numbers) not in ROULETTE_MULTI_BETS:
            return bot.reply_to(msg, "‚ö† –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª. –î–æ–ø—É—Å—Ç–∏–º–æ: 1,2,3,4,6,12")

        total_bet = bet_amount * len(numbers)
        if get_balance(uid) < total_bet:
            return bot.reply_to(msg, f"üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ: {total_bet} üç¶")

        # –î–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫—É
        update_balance(uid, -total_bet)
        result = random.randint(0, 36)
        color = "–∫—Ä–∞—Å–Ω–æ–µ" if result in RED_NUMS else "—á–µ—Ä–Ω–æ–µ" if result != 0 else "–∑–µ–ª–µ–Ω–æ–µ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        win_numbers = [n for n in numbers if n == result]
        multiplier = ROULETTE_MULTI_BETS[len(numbers)] if win_numbers else 0
        total_win = bet_amount * multiplier * len(win_numbers)

        if total_win > 0:
            update_balance(uid, total_win)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = [
            f"üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result} {['üî¥','‚ö´','üü¢'][result%3]}",
            f"‚ñ´ –°—Ç–∞–≤–∫–∞: {bet_amount} üç¶ x{len(numbers)}",
            f"‚ñ´ –ß–∏—Å–ª–∞: {', '.join(map(str, numbers))}",
            f"‚ñ´ –í—ã–∏–≥—Ä—ã—à: {total_win} üç¶ (x{multiplier})" if total_win > 0 else "‚ñ´ –í—ã–∏–≥—Ä—ã—à–∞ –Ω–µ—Ç üò¢"
        ]

        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"roulette_retry_{bet_amount}"),
            types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="roulette_stats")
        )
        
        bot.send_message(
            msg.chat.id,
            "\n".join(report),
            reply_markup=markup
        )

    except Exception as e:
        bot.reply_to(msg, f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('roulette_retry_'))
def retry_roulette(call):
    bet_amount = call.data.split('_')[-1]
    bot.send_message(call.message.chat.id, 
                    f"‚ôª –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –Ω–∞ {bet_amount} üç¶\n–ü—Ä–∏–º–µ—Ä: 4 8 36")

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

if __name__ == "__main__":
    init_db()
    bot.infinity_polling()