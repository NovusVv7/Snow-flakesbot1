import telebot
import sqlite3
import random
import time
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime

TOKEN = '7650141860:AAGYFa2RnmgP8-djuctPE2mrKx8j357gX3U'
ADMIN_ID = 6359584002

bot = telebot.TeleBot(TOKEN)

games = {}
roulette_bets = {}

RED_NUMBERS = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36]
BLACK_NUMBERS = [2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35]

def init_db():
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            icecream INTEGER DEFAULT 1000
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS promocodes (
            code TEXT PRIMARY KEY,
            amount INTEGER,
            uses_left INTEGER
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS bets (
            user_id INTEGER,
            bet_text TEXT,
            result TEXT,
            win INTEGER,
            time TEXT
        )
    """)
    conn.commit()
    conn.close()

def add_user(user):
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id, username, first_name) VALUES (?, ?, ?)", 
              (user.id, user.username, user.first_name))
    conn.commit()
    conn.close()

def get_balance(uid):
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT icecream FROM users WHERE user_id = ?", (uid,))
    row = c.fetchone()
    conn.close()
    return row[0] if row else 0

def update_balance(uid, amount):
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (uid,))
    c.execute("UPDATE users SET icecream = icecream + ? WHERE user_id = ?", (amount, uid))
    conn.commit()
    conn.close()

def log_bet(user_id, bet_text, result, win):
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("INSERT INTO bets (user_id, bet_text, result, win, time) VALUES (?, ?, ?, ?, ?)",
              (user_id, bet_text, result, win, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    conn.commit()
    conn.close()

@bot.message_handler(commands=["start"])
def start(msg):
    add_user(msg.from_user)
    bot.send_message(msg.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IceCream –ë–æ—Ç–∞!\n–ö–æ–º–∞–Ω–¥—ã:\n‚Ä¢ –ë - –±–∞–ª–∞–Ω—Å\n‚Ä¢ –ü [—Å—É–º–º–∞] ‚Äî –ø–µ—Ä–µ–≤–æ–¥\n‚Ä¢ –º–∏–Ω—ã 100 ‚Äî –∏–≥—Ä–∞\n‚Ä¢ —Å—Ç–∞–≤–∫–∞: 100 1 2 3\n‚Ä¢ –ì–æ ‚Äî —Ä—É–ª–µ—Ç–∫–∞\n‚Ä¢ /promo [–∫–æ–¥] ‚Äî –ø—Ä–æ–º–æ–∫–æ–¥\n‚Ä¢ /–≤—ã–¥–∞—Ç—å ID —Å—É–º–º–∞")

@bot.message_handler(func=lambda m: m.text.lower() == "–±")
def balance(msg):
    add_user(msg.from_user)
    bal = get_balance(msg.from_user.id)
    name = msg.from_user.first_name
    bot.send_message(msg.chat.id, f"{name}\n–ë–∞–ª–∞–Ω—Å: {bal}üç¶")

@bot.message_handler(commands=["–≤—ã–¥–∞—Ç—å"])
def give(msg):
    if msg.from_user.id != ADMIN_ID:
        return
    try:
        _, uid, amount = msg.text.split()
        update_balance(int(uid), int(amount))
        bot.send_message(msg.chat.id, f"–í—ã–¥–∞–Ω–æ {amount}üç¶ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}")
    except:
        bot.reply_to(msg, "–ü—Ä–∏–º–µ—Ä: /–≤—ã–¥–∞—Ç—å 123456789 1000000")

@bot.message_handler(func=lambda m: m.text and m.text.startswith('–ü '))
def transfer(msg):
    if not msg.reply_to_message:
        return bot.reply_to(msg, "–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
    try:
        amount = int(msg.text.split()[1])
        if amount <= 0:
            return bot.reply_to(msg, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
    except:
        return bot.reply_to(msg, "–ò—Å–ø–æ–ª—å–∑—É–π: –ü [—Å—É–º–º–∞]")
    
    sender = msg.from_user
    recipient = msg.reply_to_message.from_user
    if get_balance(sender.id) < amount:
        return bot.reply_to(msg, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
    
    update_balance(sender.id, -amount)
    update_balance(recipient.id, amount)
    bot.reply_to(msg, f"‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {amount}üç¶ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient.first_name}!")

@bot.message_handler(commands=["promo"])
def promo_handler(msg):
    args = msg.text.split()[1:]
    if msg.from_user.id != ADMIN_ID:
        return
    if len(args) < 4 or args[0] != "—Å–æ–∑–¥–∞—Ç—å":
        return bot.reply_to(msg, "–ò—Å–ø–æ–ª—å–∑—É–π: /promo —Å–æ–∑–¥–∞—Ç—å [–∫–æ–¥] [—Å—É–º–º–∞] [–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π]")
    code = args[1].upper()
    amount = int(args[2])
    uses = int(args[3])
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("INSERT INTO promocodes VALUES (?, ?, ?)", (code, amount, uses))
    conn.commit()
    conn.close()
    bot.reply_to(msg, f"–ü—Ä–æ–º–æ–∫–æ–¥ {code} —Å–æ–∑–¥–∞–Ω!üéÅ")

@bot.message_handler(func=lambda m: m.text and m.text.lower().startswith("–ø—Ä–æ–º–æ "))
def use_promo(msg):
    code = msg.text.split()[1].upper()
    user_id = msg.from_user.id
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT amount, uses_left FROM promocodes WHERE code = ?", (code,))
    promo = c.fetchone()
    if not promo:
        conn.close()
        return bot.reply_to(msg, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.‚ùå")
    amount, uses = promo
    if uses <= 0:
        conn.close()
        return bot.reply_to(msg, "–ü—Ä–æ–º–æ–∫–æ–¥ –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω.üò¢")
    
    c.execute("UPDATE promocodes SET uses_left = uses_left - 1 WHERE code = ?", (code,))
    update_balance(user_id, amount)
    conn.commit()
    conn.close()
    bot.reply_to(msg, f"üéâ –ü–æ–ª—É—á–µ–Ω–æ {amount}üç¶! –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω.")

def process_bet(p):
    p = p.lower()
    if p == '—á–µ—Ç': return [n for n in range(1,37) if n%2 ==0]
    elif p == '–Ω–µ—á–µ—Ç': return [n for n in range(1,37) if n%2 !=0]
    elif p == '–∫—Ä–∞—Å–Ω–æ–µ': return RED_NUMBERS
    elif p == '—á–µ—Ä–Ω–æ–µ': return BLACK_NUMBERS
    elif p.isdigit() and 0 <= int(p) <=36: return [int(p)]
    return None

@bot.message_handler(func=lambda m: True)
def parse_bets(msg):
    uid = msg.from_user.id
    if not msg.text or not msg.text.split()[0].isdigit():
        return

    parts = msg.text.split()
    amount = int(parts[0])
    numbers = []
    for p in parts[1:]:
        result = process_bet(p)
        if result:
            numbers.extend(result)

    if not numbers:
        return bot.reply_to(msg, "–£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —á–∏—Å–ª–∞/—Ç–∏–ø—ã (—á–µ—Ç, –Ω–µ—á–µ—Ç, –∫—Ä–∞—Å–Ω–æ–µ, —á–µ—Ä–Ω–æ–µ, 0-36)")

    total = amount * len(numbers)
    if get_balance(uid) < total:
        return bot.reply_to(msg, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: –Ω—É–∂–Ω–æ {total}üç¶")

    update_balance(uid, -total)
    roulette_bets.setdefault(uid, []).append({
        'amount': amount,
        'numbers': numbers,
        'type': parts[1:]
    })
    bot.reply_to(msg, f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ! –°—Ç–∞–≤–æ–∫: {len(numbers)}\n–ù–∞–ø–∏—à–∏ '–ì–æ' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä—É–ª–µ—Ç–∫–∏.üé∞")

@bot.message_handler(func=lambda m: m.text.lower() == "–≥–æ")
def roulette_start(msg):
    uid = msg.from_user.id
    add_user(msg.from_user)
    if uid not in roulette_bets:
        return bot.reply_to(msg, "–°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π —Å—Ç–∞–≤–∫—É.")

    anim = bot.send_message(msg.chat.id, "üé° –†—É–ª–µ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...")
    for _ in range(3):
        time.sleep(0.7)
        bot.edit_message_text(f"üé° –ö—Ä—É—Ç–∏–º... {random.randint(0, 36)}", msg.chat.id, anim.message_id)

    result = random.randint(0, 36)
    color = '–∫—Ä–∞—Å–Ω–æ–µ' if result in RED_NUMBERS else '—á–µ—Ä–Ω–æ–µ' if result != 0 else ''
    parity = '—á–µ—Ç' if result % 2 == 0 and result != 0 else '–Ω–µ—á–µ—Ç' if result != 0 else ''

    final_text = f"üéØ –í—ã–ø–∞–ª–æ: {result} {color} {parity}".strip()
    bot.edit_message_text(final_text, msg.chat.id, anim.message_id)

    total_win = 0
    report = []
    for bet in roulette_bets[uid]:
        amount = bet['amount']
        nums = bet['numbers']
        coeff = 36 / len(nums) if len(nums) < 18 else 2

        if result in nums:
            win = int(amount * coeff)
            update_balance(uid, win)
            total_win += win
            report.append(f"‚úÖ {bet['type']} x{round(coeff,2)} ‚Üí +{win}üç¶")
            log_bet(uid, str(bet['type']), f"{result}", win)
        else:
            report.append(f"‚ùå {bet['type']} ‚Üí 0")
            log_bet(uid, str(bet['type']), f"{result}", 0)

    del roulette_bets[uid]
    bot.send_message(msg.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n" + "\n".join(report) + f"\n\n–û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à: {total_win}üç¶")

if __name__ == "__main__":
    init_db()
    bot.infinity_polling()