
import json
import os
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, MessageHandler, Filters, CallbackContext, CommandHandler

TOKEN = "YOUR_BOT_TOKEN"  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
ADMINS = ['6359584002']  # ID –∞–¥–º–∏–Ω–æ–≤ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
DATA_FILE = "data.json"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    return {
        "user_balance": {},
        "banned_users": [],
        "user_bets": {},
        "total_players": 0
    }

def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=2)

data = load_data()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_message(update: Update, context: CallbackContext):
    global data
    user_id = str(update.effective_user.id)
    text = update.message.text.strip().lower()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if user_id not in data["user_balance"]:
        data["user_balance"][user_id] = 0
        data["total_players"] += 1
        save_data(data)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    if user_id in data["banned_users"]:
        update.message.reply_text("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å
    if text == '–±' or text == '/–±–∞–ª–∞–Ω—Å' or text == '–±–∞–ª–∞–Ω—Å':
        balance = data["user_balance"].get(user_id, 0)
        update.message.reply_text(f"‚ùÑÔ∏è –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance} —Å–Ω–µ–∂–∏–Ω–æ–∫")
        return

    # –¢–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
    if text.startswith('/'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        parts = text.split()
        cmd = parts[0]

        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        if user_id in ADMINS:
            if cmd == '/–≤—ã–¥–∞—Ç—å':
                try:
                    target_id = parts[1]
                    amount = int(parts[2])
                    data["user_balance"][target_id] = data["user_balance"].get(target_id, 0) + amount
                    update.message.reply_text(f"‚úÖ –í—ã–¥–∞–Ω–æ {amount} —Å–Ω–µ–∂–∏–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
                except:
                    update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /–≤—ã–¥–∞—Ç—å [user_id] [amount]")
                save_data(data)
                return

            elif cmd == '/–∑–∞–±—Ä–∞—Ç—å':
                try:
                    target_id = parts[1]
                    amount = int(parts[2])
                    if data["user_balance"].get(target_id, 0) < amount:
                        update.message.reply_text("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                        return
                    data["user_balance"][target_id] -= amount
                    update.message.reply_text(f"‚úÖ –ó–∞–±—Ä–∞–Ω–æ {amount} —Å–Ω–µ–∂–∏–Ω–æ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}")
                except:
                    update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /–∑–∞–±—Ä–∞—Ç—å [user_id] [amount]")
                save_data(data)
                return

            elif cmd == '/–±–∞–Ω':
                try:
                    target_id = parts[1]
                    if target_id not in data["banned_users"]:
                        data["banned_users"].append(target_id)
                        update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                    else:
                        update.message.reply_text("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                except:
                    update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /–±–∞–Ω [user_id]")
                save_data(data)
                return

            elif cmd == '/—Ä–∞–∑–±–∞–Ω':
                try:
                    target_id = parts[1]
                    if target_id in data["banned_users"]:
                        data["banned_users"].remove(target_id)
                        update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                    else:
                        update.message.reply_text("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                except:
                    update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /—Ä–∞–∑–±–∞–Ω [user_id]")
                save_data(data)
                return

            elif cmd == '/—Ç–æ–ø':
                top_list = sorted(data["user_balance"].items(), key=lambda x: x[1], reverse=True)[:10]
                msg = "üî• –¢–æ–ø –ø–æ —Å–Ω–µ–∂–∏–Ω–∫–∞–º:\n"
                for i, (uid, bal) in enumerate(top_list, 1):
                    msg += f"{i}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} ‚Äî {bal} —Å–Ω–µ–∂–∏–Ω–æ–∫\n"
                update.message.reply_text(msg)
                return

            elif cmd == '/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
                total = data.get("total_players", 0)
                update.message.reply_text(f"üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: {total}")
                return

            elif cmd == '/–ø–µ—Ä–µ–¥–∞—Ç—å':
                try:
                    target_id = parts[1]
                    amount = int(parts[2])
                    sender_balance = data["user_balance"].get(user_id, 0)
                    if sender_balance < amount:
                        update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω–µ–∂–∏–Ω–æ–∫.")
                        return
                    data["user_balance"][user_id] -= amount
                    data["user_balance"][target_id] = data["user_balance"].get(target_id, 0) + amount
                    update.message.reply_text(f"‚úÖ –ü–µ—Ä–µ–¥–∞–Ω–æ {amount} —Å–Ω–µ–∂–∏–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
                except:
                    update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /–ø–µ—Ä–µ–¥–∞—Ç—å [user_id] [amount]")
                save_data(data)
                return

    # –ï—Å–ª–∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –∏–≥—Ä—É
    # –ò–≥—Ä–∞ —Ä—É–ª–µ—Ç–∫–∞
    if text in ['–≥–æ', '–≥–æ!','go','start']:
        update.message.reply_text("üé≤ –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É! –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                                  "500 15\n–∏–ª–∏\n100 1-10\n–∏–ª–∏\n50 –∫—Ä–∞—Å–Ω—ã–π\n–∏–ª–∏\n20 —á–µ—Ç")
        data["user_bets"][user_id] = {'stage': 'waiting'}
        save_data(data)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏
    if user_id in data["user_bets"]:
        bet_info = data["user_bets"][user_id]
        if bet_info.get('stage') == 'waiting':
            # –ü–∞—Ä—Å–∏–º —Å—Ç–∞–≤–∫—É
            try:
                parts = text.split()
                amount = int(parts[0])
                bet_value = ' '.join(parts[1:])
                balance = data["user_balance"].get(user_id, 0)

                if amount <= 0 or amount > balance:
                    update.message.reply_text("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—Ç–∞–≤–∫–∞.")
                    return

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                if '-' in bet_value:
                    start_end = bet_value.split('-')
                    start, end = int(start_end[0]), int(start_end[1])
                    if not(0 <= start <= end <=36):
                        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω.")
                        return
                elif bet_value in ['–∫—Ä–∞—Å–Ω—ã–π', '–∫—Ä–∞—Å–Ω—ã–π', 'red']:
                    bet_type = 'red'
                elif bet_value in ['—á–µ—Ä–Ω—ã–π', '—á–µ—Ä–Ω—ã–π', 'black']:
                    bet_type = 'black'
                elif bet_value in ['–Ω–µ—á–µ—Ç', '–Ω–µ—á–µ—Ç', 'odd']:
                    bet_type = 'odd'
                elif bet_value in ['—á–µ—Ç', '—á–µ—Ç', 'even']:
                    bet_type = 'even'
                else:
                    # —á–∏—Å–ª–æ
                    bet_number = int(bet_value)
                    if not(0 <= bet_number <=36):
                        update.message.reply_text("‚ùå –ß–∏—Å–ª–æ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
                        return
                # –í—Å–µ —Ö–æ—Ä–æ—à–æ, –¥–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫—É
                data["user_bets"][user_id] = {
                    'stage': 'placed',
                    'amount': amount,
                    'bet_value': bet_value,
                    'balance': balance
                }
                save_data(data)
                update.message.reply_text("‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ñ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä—É–ª–µ—Ç–∫—É
                run_roulette(update, context, user_id)
            except:
                update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞–≤–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä:\n500 15\n–∏–ª–∏\n100 1-10\n–∏–ª–∏\n50 –∫—Ä–∞—Å–Ω—ã–π")
        return

def run_roulette(update: Update, context: CallbackContext, user_id):
    global data
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    winning_number = random.randint(0,36)
    color = 'red' if winning_number in [1,3,5,7,9,12,14,16,19,21,23,25,27,30,32,34,36] else 'black'
    parity = 'odd' if winning_number %2 ==1 else 'even'

    user_bet = data["user_bets"].get(user_id)
    if not user_bet:
        return

    amount = user_bet['amount']
    bet_value = user_bet['bet_value']
    balance = user_bet['balance']

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–≤–∫–∏
    win = False
    payout = 0

    # –î–∏–∞–ø–∞–∑–æ–Ω
    if '-' in bet_value:
        start, end = map(int, bet_value.split('-'))
        if start <= winning_number <= end:
            win = True
            payout = amount * (36 / (end - start + 1))
    # –ß–∏—Å–ª–æ
    elif bet_value.isdigit():
        if int(bet_value) == winning_number:
            win = True
            payout = amount * 35
    elif bet_value in ['–∫—Ä–∞—Å–Ω—ã–π', 'red']:
        if color == 'red':
            win = True
            payout = amount * 2
    elif bet_value in ['—á–µ—Ä–Ω—ã–π', 'black']:
        if color == 'black':
            win = True
            payout = amount * 2
    elif bet_value in ['–Ω–µ—á–µ—Ç', 'odd']:
        if parity == 'odd':
            win = True
            payout = amount * 2
    elif bet_value in ['—á–µ—Ç', 'even']:
        if parity == 'even':
            win = True
            payout = amount * 2
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞
        update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç–∞–≤–∫–∏.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    if win:
        data["user_balance"][user_id] = balance + int(payout)
        result_text = f"üéâ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {winning_number} ({color}, {parity})\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! +{int(payout)} —Å–Ω–µ–∂–∏–Ω–æ–∫"
    else:
        data["user_balance"][user_id] = balance - amount
        result_text = f"üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {winning_number} ({color}, {parity})\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {amount} —Å–Ω–µ–∂–∏–Ω–æ–∫"

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–≤–∫—É
    del data["user_bets"][user_id]
    save_data(data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    context.bot.send_message(chat_id=update.effective_chat.id, text=result_text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()