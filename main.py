
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7561318621:AAHLIMv1cQPXSkBYWkFCeys5XsXg2c4M3fc"  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

# –°–ø–∏—Å–∫–∏ –∏ —Å–ª–æ–≤–∞—Ä–∏
active_users = set()
user_pairs = {}  # user_id: partner_id
user_profiles = {}  # user_id: {'comments': [], 'reactions': 0}
vip_users = {123456789}  # –ø—Ä–∏–º–µ—Ä: —Å–ø–∏—Å–æ–∫ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ ID

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    active_users.add(user_id)
    user_profiles.setdefault(user_id, {'comments': [], 'reactions': 0})
    await update.message.reply_text("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Å–æ–µ–¥–∏–Ω—é –≤–∞—Å —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ VIP
async def check_vip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in vip_users:
        await update.message.reply_text("–í—ã VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! üéâ")
    else:
        await update.message.reply_text("–í—ã –Ω–µ VIP.")

# –ö—Ç–æ –µ—Å—Ç—å –≤ –±–æ—Ç–µ
async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users_list = list(active_users)
    if not users_list:
        text = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    else:
        text = "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(str(uid) for uid in users_list)
    await update.message.reply_text(text)

# –ü—Ä–æ—Ñ–∏–ª—å
async def –ø—Ä–æ—Ñ–∏–ª—å(update: Update, context: ContextTypes.DEFAULT_TYPE):  # –∫–æ–º–∞–Ω–¥–∞ /–ø—Ä–æ—Ñ–∏–ª—å
    user_id = update.effective_user.id
    profile = user_profiles.get(user_id, {'comments': [], 'reactions': 0})
    comments = profile['comments']
    reactions = profile['reactions']
    comments_text = "\n".join(comments) if comments else "–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."
    await update.message.reply_text(
        f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n{comments_text}\n–†–µ–∞–∫—Ü–∏–∏: {reactions}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /react üëç –∏–ª–∏ /react üëé"
    )

# –†–µ–∞–∫—Ü–∏–∏
async def react(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    parts = update.message.text.split()
    if len(parts) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /react üëç –∏–ª–∏ /react üëé")
        return
    reaction = parts[1]
    if reaction in ['üëç', 'üëé']:
        user_profiles.setdefault(user_id, {'comments': [], 'reactions': 0})
        if reaction == 'üëç':
            user_profiles[user_id]['reactions'] += 1
        else:
            user_profiles[user_id]['reactions'] -= 1
        await update.message.reply_text(f"–†–µ–∞–∫—Ü–∏—è {reaction} –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    else:
        await update.message.reply_text("–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ —Ä–µ–∞–∫—Ü–∏–∏ üëç –∏–ª–∏ üëé.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    message_text = update.message.text

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø–∞—Ä–µ
    partner_id = user_pairs.get(user_id)

    if partner_id:
        try:
            await context.bot.send_message(chat_id=partner_id, text=message_text)
            await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if update.message.photo:
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ
        for photo in update.message.photo:
            await context.bot.send_photo(chat_id=user_pairs.get(user_id, None), photo=photo.file_id)
        return
    elif update.message.video:
        await context.bot.send_video(chat_id=user_pairs.get(user_id, None), video=update.message.video.file_id)
        return
    elif update.message.voice:
        await context.bot.send_voice(chat_id=user_pairs.get(user_id, None), voice=update.message.voice.file_id)
        return
    elif update.message.document:
        await context.bot.send_document(chat_id=user_pairs.get(user_id, None), document=update.message.document.file_id)
        return

    # –ï—Å–ª–∏ –Ω–µ –≤ –ø–∞—Ä–µ, –∏—â–µ–º –¥—Ä—É–≥–æ–≥–æ
    active_users.add(user_id)

    users_list = list(active_users - {user_id})
    if not users_list:
        await update.message.reply_text("–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    recipient_id = random.choice(users_list)
    user_pairs[user_id] = recipient_id
    user_pairs[recipient_id] = user_id

    await context.bot.send_message(chat_id=recipient_id, text="–í–∞–º –Ω–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫! –ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await update.message.reply_text("–í—ã —Å–æ–µ–¥–∏–Ω–µ–Ω—ã —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º!")

# –ö–æ–º–∞–Ω–¥–∞ /skip
async def skip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    partner_id = user_pairs.pop(user_id, None)
    if partner_id:
        # –£–¥–∞–ª—è–µ–º –æ–±–æ–∏—Ö –∏–∑ –ø–∞—Ä
        user_pairs.pop(partner_id, None)
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö
        try:
            await context.bot.send_message(chat_id=partner_id, text="–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤–∞—Å.")
        except:
            pass
        await update.message.reply_text("–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –ò—â—É –Ω–æ–≤–æ–≥–æ...")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ.")

    # –ò—â–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    active_users.add(user_id)

    users_list = list(active_users - {user_id})
    if not users_list:
        await update.message.reply_text("–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    new_partner_id = random.choice(users_list)
    user_pairs[user_id] = new_partner_id
    user_pairs[new_partner_id] = user_id

    await context.bot.send_message(chat_id=new_partner_id, text="–í–∞–º –Ω–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫! –ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await update.message.reply_text("–í—ã —Å–æ–µ–¥–∏–Ω–µ–Ω—ã —Å –Ω–æ–≤—ã–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º!")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("vip", check_vip))
    app.add_handler(CommandHandler("users", list_users))
    app.add_handler(CommandHandler("–ø—Ä–æ—Ñ–∏–ª—å", –ø—Ä–æ—Ñ–∏–ª—å))
    app.add_handler(CommandHandler("skip", skip))
    app.add_handler(CommandHandler("react", react))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    app.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO | filters.VOICE | filters.Document.ALL, handle_message))
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == '__main__':
    main()