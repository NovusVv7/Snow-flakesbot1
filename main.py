import telebot
import sqlite3
import random
import time
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = '7650141860:AAGYFa2RnmgP8-djuctPE2mrKx8j357gX3U'
ADMIN_ID = 6359584002

bot = telebot.TeleBot(TOKEN)
roulette_bets = {}

RED_NUMBERS = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36]
BLACK_NUMBERS = [2,4,6,8,10,11,13,15,17,20,22,24,26,28,29,31,33,35]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    
    c.execute("""CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        icecream INTEGER DEFAULT 1000,
        banned BOOLEAN DEFAULT FALSE
    )""")
    
    c.execute("""CREATE TABLE IF NOT EXISTS promocodes (
        code TEXT PRIMARY KEY,
        amount INTEGER,
        uses_left INTEGER
    )""")
    
    c.execute("""CREATE TABLE IF NOT EXISTS roulette_log (
        user_id INTEGER,
        username TEXT,
        bet_amount INTEGER,
        bet_numbers TEXT,
        result INTEGER,
        win_amount INTEGER,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )""")
    
    conn.commit()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    return user_id == ADMIN_ID

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_user(user):
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("""INSERT OR IGNORE INTO users 
              (user_id, username, first_name, icecream) 
              VALUES (?, ?, ?, 1000)""",
              (user.id, user.username, user.first_name))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
def get_balance(uid):
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT icecream FROM users WHERE user_id = ?", (uid,))
    row = c.fetchone()
    conn.close()
    return row[0] if row else 0

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
def update_balance(uid, amount):
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (uid,))
    c.execute("UPDATE users SET icecream = icecream + ? WHERE user_id = ?", (amount, uid))
    conn.commit()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
def check_ban(uid):
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT banned FROM users WHERE user_id = ?", (uid,))
    row = c.fetchone()
    conn.close()
    return row[0] if row else False

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–æ–∫
def process_bet(p):
    p = p.lower()
    if p in ['—á–µ—Ç', 'even', '—á—ë—Ç', '—á–µ—Ç–Ω–æ–µ', '—á']:
        return [n for n in range(1,37) if n%2 == 0]
    elif p in ['–Ω–µ—á–µ—Ç', 'odd', '–Ω–µ—á—ë—Ç', '–Ω–µ—á–µ—Ç–Ω–æ–µ', '–Ω']:
        return [n for n in range(1,37) if n%2 != 0]
    elif p in ['–∫—Ä–∞—Å–Ω–æ–µ', 'red', '–∫']:
        return RED_NUMBERS
    elif p in ['—á–µ—Ä–Ω–æ–µ', 'black', '—á']:
        return BLACK_NUMBERS
    elif p.isdigit() and 0 <= int(p) <= 36:
        return [int(p)]
    return None

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@bot.message_handler(commands=["start"])
def start(msg):
    add_user(msg.from_user)
    bot.send_message(msg.chat.id, "‚ùÑÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IceCream Casino!\n\n"
                     "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                     "‚Ä¢ –ë - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
                     "‚Ä¢ –ü [—Å—É–º–º–∞] - –ü–µ—Ä–µ–≤–æ–¥ (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
                     "‚Ä¢ [—Å—Ç–∞–≤–∫–∞] [—á–∏—Å–ª–∞/—Ç–∏–ø—ã] - –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É\n"
                     "‚Ä¢ –ì–æ - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É\n\n"
                     "–ü—Ä–∏–º–µ—Ä —Å—Ç–∞–≤–∫–∏: 100 –∫—Ä–∞—Å–Ω–æ–µ —á–µ—Ç 12")

@bot.message_handler(func=lambda m: m.text.lower() == "–±")
def balance(msg):
    if check_ban(msg.from_user.id):
        return
    add_user(msg.from_user)
    bal = get_balance(msg.from_user.id)
    bot.send_message(msg.chat.id, f"üç¶ –í–∞—à –±–∞–ª–∞–Ω—Å: {bal}")

@bot.message_handler(func=lambda m: m.text and m.text.startswith('–ü '))
def transfer(msg):
    if check_ban(msg.from_user.id):
        return bot.reply_to(msg, "‚õî –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!")
    
    if not msg.reply_to_message:
        return bot.reply_to(msg, "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è!")
    
    try:
        amount = int(msg.text.split()[1])
        if amount <= 0:
            raise ValueError
    except:
        return bot.reply_to(msg, "‚ùå –§–æ—Ä–º–∞—Ç: –ü [—Å—É–º–º–∞]")
    
    sender = msg.from_user
    recipient = msg.reply_to_message.from_user
    
    if get_balance(sender.id) < amount:
        return bot.reply_to(msg, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
    
    update_balance(sender.id, -amount)
    update_balance(recipient.id, amount)
    bot.reply_to(msg, f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {amount}üç¶\n"
                 f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient.first_name}")

@bot.message_handler(func=lambda m: m.text and any(c.isdigit() for c in m.text.split()[0]))
def parse_bets(msg):
    uid = msg.from_user.id
    if check_ban(uid):
        return
    
    try:
        parts = msg.text.split()
        amount = int(parts[0])
        numbers = []
        types = []
        
        for p in parts[1:]:
            nums = process_bet(p)
            if nums:
                numbers.extend(nums)
                types.append(p)
        
        numbers = list(set(numbers))
        if not numbers:
            return bot.reply_to(msg, "‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–∞ –∏–ª–∏ —Ç–∏–ø—ã —Å—Ç–∞–≤–æ–∫!")
        
        if amount < 1:
            return bot.reply_to(msg, "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 1üç¶")
        
        balance = get_balance(uid)
        if balance < amount:
            return bot.reply_to(msg, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ë–∞–ª–∞–Ω—Å: {balance}üç¶")
        
        update_balance(uid, -amount)
        roulette_bets[uid] = {
            'amount': amount,
            'numbers': numbers,
            'types': types
        }
        
        bot.reply_to(msg, f"‚úÖ –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n"
                     f"–°—É–º–º–∞: {amount}üç¶\n"
                     f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª: {len(numbers)}\n"
                     f"–ù–∞–ø–∏—à–∏—Ç–µ '–ì–æ' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä—É–ª–µ—Ç–∫–∏!")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å—Ç–∞–≤–∫–∏: {e}")
        bot.reply_to(msg, "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Ç–∞–≤–∫–∏!\n–ü—Ä–∏–º–µ—Ä: 100 –∫—Ä–∞—Å–Ω–æ–µ —á–µ—Ç 12")

@bot.message_handler(func=lambda m: m.text.lower() == "–≥–æ")
def roulette_start(msg):
    uid = msg.from_user.id
    if check_ban(uid):
        return
    
    if uid not in roulette_bets:
        return bot.reply_to(msg, "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É!")
    
    try:
        bet = roulette_bets[uid]
        anim = bot.send_message(msg.chat.id, "üé° –ó–∞–ø—É—Å–∫ —Ä—É–ª–µ—Ç–∫–∏...")
        
        # –ê–Ω–∏–º–∞—Ü–∏—è
        for i in range(3):
            time.sleep(0.7)
            bot.edit_message_text(f"üåÄ –ö—Ä—É—Ç–∏–º... {random.randint(0,36)}",
                                msg.chat.id,
                                anim.message_id)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        result = random.randint(0, 36)
        color = '–∫—Ä–∞—Å–Ω–æ–µ' if result in RED_NUMBERS else '—á–µ—Ä–Ω–æ–µ' if result in BLACK_NUMBERS else ''
        parity = '—á–µ—Ç' if result%2 == 0 and result !=0 else '–Ω–µ—á–µ—Ç' if result !=0 else ''
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.edit_message_text(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result} {color} {parity}",
                            msg.chat.id,
                            anim.message_id)
        
        # –†–∞—Å—á–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞
        win = 0
        coeff = 36 / len(bet['numbers']) if 0 < len(bet['numbers']) < 18 else 2
        
        if result in bet['numbers']:
            win = int(bet['amount'] * coeff)
            update_balance(uid, win)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        conn = sqlite3.connect("bot.db")
        c = conn.cursor()
        c.execute("""INSERT INTO roulette_log 
                  (user_id, username, bet_amount, bet_numbers, result, win_amount)
                  VALUES (?, ?, ?, ?, ?, ?)""",
                  (uid, msg.from_user.username, bet['amount'], str(bet['numbers']), result, win))
        conn.commit()
        conn.close()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = (f"‚ñ´Ô∏è –°—Ç–∞–≤–∫–∞: {bet['amount']}üç¶\n"
                      f"‚ñ´Ô∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x{coeff:.1f}\n"
                      f"‚ñ´Ô∏è –í—ã–∏–≥—Ä—ã—à: {'+' + str(win) if win else '0'}\n"
                      f"‚ñ´Ô∏è –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_balance(uid)}üç¶")
        
        del roulette_bets[uid]
        bot.send_message(msg.chat.id, result_text)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä—É–ª–µ—Ç–∫–∏: {e}")
        bot.reply_to(msg, "‚ùå –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=["give"])
def give_icecream(msg):
    if not is_admin(msg.from_user.id):
        return
    
    try:
        args = msg.text.split()[1:]
        if msg.reply_to_message:
            amount = int(args[0])
            user = msg.reply_to_message.from_user
        else:
            amount = int(args[0])
            user_id = int(args[1])
            user = bot.get_chat_member(user_id, user_id).user
    except:
        return bot.reply_to(msg, "‚ùå –§–æ—Ä–º–∞—Ç:\n/give [—Å—É–º–º–∞] [user_id]\n–∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º /give [—Å—É–º–º–∞]")
    
    update_balance(user.id, amount)
    bot.reply_to(msg, f"‚úÖ –í—ã–¥–∞–Ω–æ {amount}üç¶ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.first_name}")

@bot.message_handler(commands=["stats"])
def stats(msg):
    if not is_admin(msg.from_user.id):
        return
    
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    
    c.execute("SELECT COUNT(*) FROM users")
    total_users = c.fetchone()[0]
    
    c.execute("SELECT SUM(icecream) FROM users")
    total_icecream = c.fetchone()[0] or 0
    
    c.execute("SELECT COUNT(*) FROM roulette_log")
    total_bets = c.fetchone()[0]
    
    conn.close()
    
    stats_text = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
                 f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                 f"üç¶ –í—Å–µ–≥–æ –º–æ—Ä–æ–∂–µ–Ω–æ–≥–æ: {total_icecream}\n"
                 f"üé∞ –°—ã–≥—Ä–∞–Ω–æ —Å—Ç–∞–≤–æ–∫: {total_bets}")
    bot.reply_to(msg, stats_text)

@bot.message_handler(commands=["top"])
def top_balance(msg):
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT first_name, icecream FROM users ORDER BY icecream DESC LIMIT 10")
    top = c.fetchall()
    conn.close()
    
    top_text = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n"
    for i, (name, balance) in enumerate(top, 1):
        top_text += f"{i}. {name} - {balance}üç¶\n"
    
    bot.send_message(msg.chat.id, top_text)

@bot.message_handler(commands=["take"])
def take_icecream(msg):
    if not is_admin(msg.from_user.id):
        return
    
    try:
        args = msg.text.split()[1:]
        user_id = int(args[1])
        amount = int(args[0])
    except:
        return bot.reply_to(msg, "‚ùå –§–æ—Ä–º–∞—Ç: /take [—Å—É–º–º–∞] [user_id]")
    
    current = get_balance(user_id)
    take = min(amount, current)
    update_balance(user_id, -take)
    bot.reply_to(msg, f"‚úÖ –ò–∑—ä—è—Ç–æ {take}üç¶ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

@bot.message_handler(commands=["ban"])
def ban_user(msg):
    if not is_admin(msg.from_user.id):
        return
    
    try:
        user_id = int(msg.text.split()[1])
    except:
        return bot.reply_to(msg, "‚ùå –§–æ—Ä–º–∞—Ç: /ban [user_id]")
    
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("UPDATE users SET banned = TRUE WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()
    bot.reply_to(msg, f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω")

if __name__ == "__main__":
    init_db()
    bot.infinity_polling()