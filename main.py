import telebot
import sqlite3
import random
import time
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = '7650141860:AAGYFa2RnmgP8-djuctPE2mrKx8j357gX3U'
ADMIN_ID = 6359584002

bot = telebot.TeleBot(TOKEN)
roulette_bets = {}
mines_games = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã "–ú–∏–Ω—ã"
MINES_FIELD_SIZE = 49  # 7x7
MINES_COEFFICIENTS = [1.45, 1.79, 2.36, 5, 6, 12, 19, 55]
MINES_DEFAULT_BOMBS = 7

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä—É–ª–µ—Ç–∫–∏
RED_NUMBERS = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36]
BLACK_NUMBERS = [2,4,6,8,10,11,13,15,17,20,22,24,26,28,29,31,33,35]

def init_db():
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        icecream INTEGER DEFAULT 1000,
        banned BOOLEAN DEFAULT FALSE
    )""")
    c.execute("""CREATE TABLE IF NOT EXISTS mines_log (
        user_id INTEGER,
        bet_amount INTEGER,
        bombs INTEGER,
        result FLOAT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )""")
    conn.commit()
    conn.close()

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)

@bot.message_handler(commands=["mines"])
def start_mines(msg):
    uid = msg.from_user.id
    if check_ban(uid):
        return
    
    try:
        args = msg.text.split()[1:]
        if len(args) < 1:
            return bot.reply_to(msg, "‚ùå –§–æ—Ä–º–∞—Ç: /mines [—Å—Ç–∞–≤–∫–∞]")
        
        bet_amount = int(args[0])
        bombs = MINES_DEFAULT_BOMBS
        
        if get_balance(uid) < bet_amount:
            return bot.reply_to(msg, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        
        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ 7x7
        field = ['üü¶']*MINES_FIELD_SIZE
        mines = random.sample(range(MINES_FIELD_SIZE), bombs)
        
        update_balance(uid, -bet_amount)
        mines_games[uid] = {
            'bet': bet_amount,
            'mines': mines,
            'opened': [],
            'coefficients': MINES_COEFFICIENTS.copy(),
            'cashout': False
        }
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É 7x7
        keyboard = InlineKeyboardMarkup()
        for i in range(0, 49, 7):
            row = []
            for j in range(i, i+7):
                row.append(InlineKeyboardButton(text=field[j], callback_data=f"mine_{j}"))
            keyboard.add(*row)
        keyboard.add(InlineKeyboardButton(text=f"üí∞ –ó–∞–±—Ä–∞—Ç—å x{MINES_COEFFICIENTS[0]}", callback_data="mine_cashout"))
        
        bot.send_message(msg.chat.id,
                         f"üí£ –ò–≥—Ä–∞ ¬´–ú–∏–Ω—ã 7x7¬ª\n"
                         f"üí∞ –°—Ç–∞–≤–∫–∞: {bet_amount}üç¶\n"
                         f"üö´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω: {bombs}\n"
                         f"üé∞ –¢–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x{MINES_COEFFICIENTS[0]}",
                         reply_markup=keyboard)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –º–∏–Ω–∞—Ö: {e}")
        bot.reply_to(msg, "‚ùå –û—à–∏–±–∫–∞! –§–æ—Ä–º–∞—Ç: /mines [—Å—Ç–∞–≤–∫–∞]")

@bot.callback_query_handler(func=lambda call: call.data.startswith('mine'))
def handle_mines(call):
    uid = call.from_user.id
    if uid not in mines_games:
        return
    
    game = mines_games[uid]
    
    if call.data == "mine_cashout":
        if len(game['opened']) >= len(game['coefficients']):
            coeff = game['coefficients'][-1]
        else:
            coeff = game['coefficients'][len(game['opened'])]
        
        win = int(game['bet'] * coeff)
        update_balance(uid, win)
        del mines_games[uid]
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        conn = sqlite3.connect("bot.db")
        c = conn.cursor()
        c.execute("INSERT INTO mines_log (user_id, bet_amount, bombs, result) VALUES (?, ?, ?, ?)",
                  (uid, game['bet'], MINES_DEFAULT_BOMBS, win))
        conn.commit()
        conn.close()
        
        bot.edit_message_text(f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–ª–∏ {win}üç¶ (x{coeff})!",
                            call.message.chat.id,
                            call.message.message_id)
        return
    
    cell = int(call.data.split('_')[1])
    
    if cell in game['mines']:
        update_balance(uid, 0)
        del mines_games[uid]
        bot.edit_message_text(f"üí• –í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –º–∏–Ω—É! –ü—Ä–æ–∏–≥—Ä—ã—à {game['bet']}üç¶",
                            call.message.chat.id,
                            call.message.message_id)
    else:
        game['opened'].append(cell)
        step = len(game['opened'])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        new_text = f"üí£ –ò–≥—Ä–∞ ¬´–ú–∏–Ω—ã 7x7¬ª\nüí∞ –°—Ç–∞–≤–∫–∞: {game['bet']}üç¶\nüö´ –ú–∏–Ω: {MINES_DEFAULT_BOMBS}\n"
        keyboard = call.message.reply_markup
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        for row in keyboard.keyboard:
            for btn in row:
                if btn.callback_data == call.data:
                    btn.text = 'üü©'
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        if step < len(game['coefficients']):
            current_coeff = game['coefficients'][step]
        else:
            current_coeff = game['coefficients'][-1] * (1.5 ** (step - len(game['coefficients']) + 1))
        
        keyboard.keyboard[-1] = [InlineKeyboardButton(
            text=f"üí∞ –ó–∞–±—Ä–∞—Ç—å x{current_coeff:.2f}" if step < 15 else "üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à",
            callback_data="mine_cashout")]
        
        bot.edit_message_text(f"{new_text}üé∞ –¢–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x{current_coeff:.2f}\n‚úÖ –û—Ç–∫—Ä—ã—Ç–æ –∫–ª–µ—Ç–æ–∫: {step}",
                            call.message.chat.id,
                            call.message.message_id,
                            reply_markup=keyboard)

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ä—É–ª–µ—Ç–∫–∞ —Å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
@bot.message_handler(func=lambda m: m.text.lower() == "–≥–æ")
def roulette_start(msg):
    uid = msg.from_user.id
    if check_ban(uid):
        return
    
    if uid not in roulette_bets:
        return bot.reply_to(msg, "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É!")
    
    try:
        bet = roulette_bets[uid]
        result = random.randint(0, 36)
        color = '–∫—Ä–∞—Å–Ω–æ–µ' if result in RED_NUMBERS else '—á–µ—Ä–Ω–æ–µ' if result in BLACK_NUMBERS else ''
        parity = '—á–µ—Ç' if result%2 == 0 and result !=0 else '–Ω–µ—á–µ—Ç' if result !=0 else ''
        
        # –ê–Ω–∏–º–∞—Ü–∏—è
        anim = bot.send_message(msg.chat.id, "üé° –†—É–ª–µ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        time.sleep(1)
        bot.edit_message_text("üé° –ö—Ä—É—Ç–∏–º... 0", msg.chat.id, anim.message_id)
        time.sleep(1)
        bot.edit_message_text(f"üé° –ö—Ä—É—Ç–∏–º... {result}", msg.chat.id, anim.message_id)
        time.sleep(1)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        bot.edit_message_text(f"üéØ –í—ã–ø–∞–ª–æ: {result} {color} {parity}",
                            msg.chat.id,
                            anim.message_id)
        
        # –†–∞—Å—á–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞
        numbers_count = len(bet['numbers'])
        coeff = 36 / numbers_count if numbers_count > 0 else 0
        
        win = 0
        if result in bet['numbers']:
            win = int(bet['amount'] * coeff)
            update_balance(uid, win)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = (f"‚ñ´Ô∏è –°—Ç–∞–≤–∫–∞: {bet['amount']}üç¶\n"
                      f"‚ñ´Ô∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x{coeff}\n"
                      f"‚ñ´Ô∏è –í—ã–∏–≥—Ä—ã—à: {'+' + str(win) if win else '0'}\n"
                      f"‚ñ´Ô∏è –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_balance(uid)}üç¶")
        
        del roulette_bets[uid]
        bot.send_message(msg.chat.id, result_text)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä—É–ª–µ—Ç–∫–∏: {e}")
        bot.reply_to(msg, "‚ùå –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

if __name__ == "__main__":
    init_db()
    bot.infinity_polling()