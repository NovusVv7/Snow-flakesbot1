
import json
import os
import random
from telegram import Update
from telegram.ext import Updater, MessageHandler, Filters, CallbackContext, CommandHandler

TOKEN = "7561318621:AAHLIMv1cQPXSkBYWkFCeys5XsXg2c4M3fc"  # –≤—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω
ADMINS = ['6359584002']
DATA_FILE = "data.json"

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    return {
        "user_balance": {},
        "banned_users": [],
        "user_bets": {},
        "total_players": 0
    }

def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=2)

data = load_data()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_message(update: Update, context: CallbackContext):
    global data
    user_id = str(update.effective_user.id)
    text = update.message.text.strip().lower()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in data["user_balance"]:
        data["user_balance"][user_id] = 10000
        data["total_players"] += 1
        save_data(data)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    if user_id in data["banned_users"]:
        update.message.reply_text("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!")
        return

    # –ë–∞–ª–∞–Ω—Å
    if text in ['–±', '/–±–∞–ª–∞–Ω—Å', '–±–∞–ª–∞–Ω—Å']:
        balance = data["user_balance"].get(user_id, 0)
        update.message.reply_text(f"‚ùÑÔ∏è –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance} —Å–Ω–µ–∂–∏–Ω–æ–∫‚ùÑÔ∏è")
        return

    # –û—Ç–º–µ–Ω–∞ —Å—Ç–∞–≤–∫–∏
    if text == '/–æ—Ç–º–µ–Ω–∞':
        if user_id in data["user_bets"]:
            del data["user_bets"][user_id]
            save_data(data)
            update.message.reply_text("üö´ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        else:
            update.message.reply_text("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–∞–≤–∫–∏.")
        return

    # –ó–∞–ø—É—Å–∫ —Ä—É–ª–µ—Ç–∫–∏
    if text == '–≥–æ':
        start_roulette(update, context, user_id)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–æ–∫
    handle_bet_message(update, context, user_id, text)

def handle_bet_message(update: Update, context: CallbackContext, user_id, text):
    global data
    if user_id in data["user_bets"]:
        update.message.reply_text("‚ùó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞. –ü–æ–¥–æ–∂–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
        return

    try:
        parts = text.split()
        amount = int(parts[0])
        bet_input = ' '.join(parts[1:])

        balance = data["user_balance"].get(user_id, 0)
        if amount <= 0:
            update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return
        if amount > balance:
            update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω–µ–∂–∏–Ω–æ–∫‚ùÑÔ∏è.")
            return

        # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–≤–∫–∏
        if '-' in bet_input:
            start_end = bet_input.split('-')
            start, end = int(start_end[0]), int(start_end[1])
            if not (0 <= start <= end <= 36):
                update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω.")
                return
            bet_type = 'range'
            bet_value = {'start': start, 'end': end}
        elif bet_input in ['–∫—Ä–∞—Å–Ω—ã–π', 'red']:
            bet_type = 'color'
            bet_value = '–∫—Ä–∞—Å–Ω—ã–π'
        elif bet_input in ['—á–µ—Ä–Ω—ã–π', 'black']:
            bet_type = 'color'
            bet_value = '—á–µ—Ä–Ω—ã–π'
        elif bet_input in ['–Ω–µ—á–µ—Ç', '–Ω–µ—á–µ—Ç', 'odd']:
            bet_type = 'parity'
            bet_value = '–Ω–µ—á–µ—Ç'
        elif bet_input in ['—á–µ—Ç', 'even']:
            bet_type = 'parity'
            bet_value = '—á–µ—Ç'
        elif all(c.isdigit() or c == ' ' for c in bet_input):
            nums = list(set(int(n) for n in bet_input.split() if n.isdigit()))
            if all(0 <= n <= 36 for n in nums):
                bet_type = 'multiple'
                bet_value = nums
            else:
                update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —á–∏—Å–ª–∞.")
                return
        elif len(parts) == 2 and parts[1].isdigit():
            num = int(parts[1])
            if 0 <= num <= 36:
                bet_type = 'number'
                bet_value = num
            else:
                update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ.")
                return
        else:
            update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞–≤–∫–∏.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É
        data["user_bets"][user_id] = {
            'amount': amount,
            'type': bet_type,
            'value': bet_value,
            'balance': balance
        }
        save_data(data)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä—É–ª–µ—Ç–∫—É
        start_roulette(update, context, user_id)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏.")

def start_roulette(update, context, user_id):
    global data
    result_number = random.randint(0,36)
    red_numbers = [1,3,5,7,9,12,14,16,19,21,23,25,27,30,32,34,36]
    color = '–∫—Ä–∞—Å–Ω—ã–π' if result_number in red_numbers else '—á–µ—Ä–Ω—ã–π'
    parity = '–Ω–µ—á–µ—Ç' if result_number % 2 == 1 else '—á–µ—Ç'

    bet = data["user_bets"].get(user_id)
    if not bet:
        return

    amount = bet['amount']
    balance = bet['balance']
    win = False
    payout = 0

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
    if bet['type'] == 'range':
        s, e = bet['value']['start'], bet['value']['end']
        if s <= result_number <= e:
            win = True
            payout = amount * (36 / (e - s + 1))
    elif bet['type'] == 'color':
        if bet['value'] == color:
            win = True
            payout = amount * 2
    elif bet['type'] == 'parity':
        if bet['value'] == parity:
            win = True
            payout = amount * 2
    elif bet['type'] == 'multiple':
        if result_number in bet['value']:
            win = True
            payout = amount * 35
    elif bet['type'] == 'number':
        if bet['value'] == result_number:
            win = True
            payout = amount * 36

    if win:
        new_balance = int(balance + payout)
        data["user_balance"][user_id] = new_balance
        msg = f"üéâ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: *{result_number}* ({color}, {parity})\nüéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! +{int(payout)} —Å–Ω–µ–∂–∏–Ω–æ–∫‚ùÑÔ∏è"
    else:
        new_balance = int(balance - amount)
        data["user_balance"][user_id] = new_balance
        msg = f"üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: *{result_number}* ({color}, {parity})\n‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {amount} —Å–Ω–µ–∂–∏–Ω–æ–∫‚ùÑÔ∏è"

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–≤–∫—É
    del data["user_bets"][user_id]
    save_data(data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    context.bot.send_message(chat_id=update.effective_chat.id, text=msg, parse_mode='Markdown')

def handle_command(update, context):
    global data
    user_id = str(update.effective_user.id)
    parts = update.message.text.split()
    cmd = parts[0]

    if user_id not in ADMINS:
        return

    if cmd == '/–≤—ã–¥–∞—Ç—å':
        try:
            target_id = parts[1]
            amount = int(parts[2])
            data["user_balance"][target_id] = data["user_balance"].get(target_id, 0) + amount
            update.message.reply_text(f"‚úÖ –í—ã–¥–∞–Ω–æ {amount} —Å–Ω–µ–∂–∏–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
        except:
            update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /–≤—ã–¥–∞—Ç—å [user_id] [amount]")
        save_data(data)
    elif cmd == '/–∑–∞–±—Ä–∞—Ç—å':
        try:
            target_id = parts[1]
            amount = int(parts[2])
            if data["user_balance"].get(target_id, 0) < amount:
                update.message.reply_text("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                return
            data["user_balance"][target_id] -= amount
            update.message.reply_text(f"‚úÖ –ó–∞–±—Ä–∞–Ω–æ {amount} —Å–Ω–µ–∂–∏–Ω–æ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}")
        except:
            update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /–∑–∞–±—Ä–∞—Ç—å [user_id] [amount]")
        save_data(data)
    elif cmd == '/–±–∞–Ω':
        try:
            target_id = parts[1]
            if target_id not in data["banned_users"]:
                data["banned_users"].append(target_id)
                update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            else:
                update.message.reply_text("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        except:
            update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /–±–∞–Ω [user_id]")
        save_data(data)
    elif cmd == '/—Ä–∞–∑–±–∞–Ω':
        try:
            target_id = parts[1]
            if target_id in data["banned_users"]:
                data["banned_users"].remove(target_id)
                update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            else:
                update.message.reply_text("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        except:
            update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /—Ä–∞–∑–±–∞–Ω [user_id]")
        save_data(data)
    elif cmd == '/—Ç–æ–ø':
        top_list = sorted(data["user_balance"].items(), key=lambda x: x[1], reverse=True)[:10]
        msg = "üî• –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n"
        for i, (uid, bal) in enumerate(top_list, 1):
            msg += f"{i}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}: {bal} —Å–Ω–µ–∂–∏–Ω–æ–∫‚ùÑÔ∏è\n"
        update.message.reply_text(msg)

def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler('start', lambda u, c: u.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ '–ì–æ' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dp.add_handler(CommandHandler('–≤—ã–¥–∞—Ç—å', handle_command))
    dp.add_handler(CommandHandler('–∑–∞–±—Ä–∞—Ç—å', handle_command))
    dp.add_handler(CommandHandler('–±–∞–Ω', handle_command))
    dp.add_handler(CommandHandler('—Ä–∞–∑–±–∞–Ω', handle_command))
    dp.add_handler(CommandHandler('—Ç–æ–ø', handle_command))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()