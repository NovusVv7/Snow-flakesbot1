import asyncio
import random
import logging
import sqlite3
from aiogram import Bot, Dispatcher, types, BaseMiddleware, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.filters import Command, CommandObject
from aiogram.exceptions import TelegramForbiddenError
from sqlalchemy.ext.asyncio import (
    create_async_engine,
    AsyncSession,
    async_sessionmaker
)
from sqlalchemy.orm import declarative_base, mapped_column, Mapped
from sqlalchemy import BigInteger, String, select, update, Column, Integer
from sqlalchemy.exc import IntegrityError

TOKEN = "7561318621:AAHLIMv1cQPXSkBYWkFCeys5XsXg2c4M3fc"
ADMIN_ID = [6359584002]  # –í–∞—à–∏ ID –∞–¥–º–∏–Ω–æ–≤

logging.basicConfig(level=logging.INFO)

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher(storage=MemoryStorage())

engine = create_async_engine("sqlite+aiosqlite:///bot.db", echo=False)
async_session = async_sessionmaker(engine, expire_on_commit=True)
Base = declarative_base()

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class User(Base):
    __tablename__ = "users"
    user_id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    username: Mapped[str] = mapped_column(String)
    first_name: Mapped[str] = mapped_column(String)
    icecream: Mapped[int] = mapped_column(BigInteger, default=1000)

class Promo(Base):
    __tablename__ = "promo"
    id = Column(Integer, primary_key=True)
    owner_id = Column(BigInteger)
    promo_name = Column(String)
    amount = Column(Integer)
    max_activations = Column(Integer)
    activations = Column(Integer, default=0)

# –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
games = {}
roulette_bets: dict[int, list[dict]] = {}
banned_users = set()
COEFFS = [1.7, 2.5, 3, 4.67, 25]
RED_NUMS = {1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36}
BLACK_NUMS = set(range(1, 37)) - RED_NUMS

# –ú–∏–¥–ª–≤–∞—Ä—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class AddUserMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: Message, data):
        if event.from_user:
            await add_user(event.from_user)
            
            async with async_session() as session:
                user = await session.get(User, event.from_user.id)
                
                if user:
                    await session.execute(update(User).where(User.user_id == event.from_user.id).values(
                        username=event.from_user.username, 
                        first_name=event.from_user.first_name
                    ))
                
        return await handler(event, data)

dp.message.middleware(AddUserMiddleware())

# –£—Ç–∏–ª–∏—Ç—ã
async def add_user(user):
    async with async_session() as session:
        try:
            session.add(User(
                user_id=user.id, 
                username=user.username, 
                first_name=user.first_name
            ))
            await session.commit()
        except IntegrityError:
            await session.rollback()

async def get_balance(uid: int):
    async with async_session() as session:
        user = await session.get(User, uid)
        return user.icecream if user else 0

async def update_balance(uid: int, amount: int):
    async with async_session() as session:
        user = await session.get(User, uid)
        if user:
            user.icecream += amount
            await session.commit()

async def get_top_users():
    async with async_session() as session:
        result = await session.execute(
            select(User)
            .order_by(User.icecream.desc())
            .limit(10)
        )
        return result.scalars().all()

# –ö–æ–º–∞–Ω–¥—ã
@dp.message(Command("start"))
async def start(msg: Message):
    await msg.answer(
        "‚ùÑÔ∏èüç® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IceCream World! üçß\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üçß /–± - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "üí£ /–º–∏–Ω—ã 100 - –∏–≥—Ä–∞ –≤ –º–∏–Ω—ã\n"
        "üé∞ /—Ä—É–ª–µ—Ç–∫–∞ 100 1 2 3 - —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Ä—É–ª–µ—Ç–∫—É\n"
        "üîÑ /–ø 1000 (–æ—Ç–≤–µ—Ç–æ–º) - –ø–µ—Ä–µ–¥–∞—Ç—å –º–æ—Ä–æ–∂–µ–Ω–æ–µ\n"
        "üèÜ /—Ç–æ–ø - —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n"
        "üíù /–ø—Ä–æ–º–æ [–∫–æ–¥] - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
        "‚ÑπÔ∏è /info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"
    )

@dp.message(Command("info"))
async def info(msg: Message):
    await msg.answer(
        "üç¶ IceCream World –ë–æ—Ç\n"
        "üëë –í–ª–∞–¥–µ–ª–µ—Ü: @admin\n"
        "üéÆ –ò–≥—Ä—ã:\n"
        "‚Ä¢ üí£ –ú–∏–Ω—ã (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–æ x25)\n"
        "‚Ä¢ üé∞ –†—É–ª–µ—Ç–∫–∞ (–µ–≤—Ä–æ–ø–µ–π—Å–∫–∞—è)\n"
        "üíé –í–∞–ª—é—Ç–∞: –ú–æ—Ä–æ–∂–µ–Ω–æ–µ üçß"
    )

@dp.message(Command("—Ç–æ–ø"))
async def top(msg: Message):
    top_users = await get_top_users()
    text = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –º–æ—Ä–æ–∂–µ–Ω–æ–º—É üçß:\n\n"
    for i, user in enumerate(top_users, start=1):
        username = f"@{user.username}" if user.username else f"ID {user.user_id}"
        text += f"{i}. {user.first_name} ({username}) ‚Äî {user.icecream}üç®\n"
    await msg.answer(text)

@dp.message(Command("–±"))
async def balance(msg: Message):
    bal = await get_balance(msg.from_user.id)
    await msg.answer(
        f"üë§ –ò–≥—Ä–æ–∫: {msg.from_user.first_name}\n"
        f"üì¶ –ë–∞–ª–∞–Ω—Å: {bal}üçß\n"
        f"üÜî ID: {msg.from_user.id}"
    )

# RP-–∫–æ–º–∞–Ω–¥—ã
@dp.message(lambda message: message.text.lower().startswith('–∫—É—Å—å'))
async def kuss(message: Message):
    if not message.reply_to_message:
        return await message.answer("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
    user1 = message.from_user.first_name
    user2 = message.reply_to_message.from_user.first_name
    await message.answer(f"üê∂üòª | {user1} —É–∫—É—Å–∏–ª {user2}")

@dp.message(lambda message: message.text.lower().startswith('–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å'))
async def kisslovs(message: Message):
    if not message.reply_to_message:
        return await message.answer("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
    user1 = message.from_user.first_name
    user2 = message.reply_to_message.from_user.first_name
    await message.answer(f"üòòüíã| {user1} –ø–æ—Ü–µ–ª–æ–≤–∞–ª {user2}")

@dp.message(lambda message: message.text.lower().startswith('—Ä–ø'))
async def rp_list(message: Message):
    response = (
        "–°–ø–∏—Å–æ–∫ RP-–∫–æ–º–∞–Ω–¥:\n\n"
        "–ü–æ—Ü–µ–ª–æ–≤–∞—Ç—å üíã\n–£–±–∏—Ç—å üíÄ\n–†–∞–± ‚õì\n–ö—É—Å—å üê∂\n–ü–æ–≥–ª–∞–¥–∏—Ç—å ü•∞\n–ò–∑–±–∏—Ç—å ü§¨"
    )
    await message.answer(response)

# –ü—Ä–æ–º–æ–∫–æ–¥—ã
@dp.message(Command("–ø—Ä–æ–º–æ_—Å–æ–∑–¥–∞—Ç—å"))
async def create_promo(msg: Message, command: CommandObject):
    if msg.from_user.id not in ADMIN_ID:
        return
    
    try:
        _, name, amount, activations = command.args.split()
        amount = int(amount)
        activations = int(activations)
    except:
        return await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–ø—Ä–æ–º–æ_—Å–æ–∑–¥–∞—Ç—å [–∏–º—è] [—Å—É–º–º–∞] [–∞–∫—Ç–∏–≤–∞—Ü–∏–∏]")

    async with async_session() as session:
        promo = Promo(
            owner_id=msg.from_user.id,
            promo_name=name,
            amount=amount,
            max_activations=activations
        )
        session.add(promo)
        await session.commit()
    
    await msg.answer(f"üç¶ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!\n–ò–º—è: {name}\n–ù–∞–≥—Ä–∞–¥–∞: {amount}üçß\n–ê–∫—Ç–∏–≤–∞—Ü–∏–π: {activations}")

@dp.message(Command("–ø—Ä–æ–º–æ"))
async def use_promo(msg: Message, command: CommandObject):
    if not command.args:
        return await msg.answer("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥")
    
    promo_name = command.args.strip()
    
    async with async_session() as session:
        promo = await session.execute(select(Promo).where(Promo.promo_name == promo_name))
        promo = promo.scalar()
        
        if not promo:
            return await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!")
        
        if promo.activations >= promo.max_activations:
            return await msg.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞–∫—Ç–∏–≤–∞—Ü–∏—é
        activated = await session.execute(select(UserPromo).where(
            UserPromo.user_id == msg.from_user.id,
            UserPromo.promo_name == promo_name
        ))
        if activated.scalar():
            return await msg.answer("‚ùå –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!")
        
        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
        await update_balance(msg.from_user.id, promo.amount)
        promo.activations += 1
        session.add(UserPromo(user_id=msg.from_user.id, promo_name=promo_name))
        await session.commit()
    
    await msg.answer(f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–ª—É—á–µ–Ω–æ {promo.amount}üçß")

# –ò–≥—Ä—ã (–º–∏–Ω—ã, —Ä—É–ª–µ—Ç–∫–∞, –ø–µ—Ä–µ–≤–æ–¥) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –∫–æ–¥–∞
# ... (–≤—Å—Ç–∞–≤–∏—Ç—å –∫–æ–¥ –∏–≥—Ä –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞)

async def main():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())