import json
import random
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils import executor
import os

API_TOKEN = os.getenv("API_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

DB_FILE = "db.json"
ADMINS = [123456789]  # –ó–ê–ú–ï–ù–ò –Ω–∞ —Å–≤–æ–π Telegram user ID

def load_db():
    try:
        with open(DB_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_db(db):
    with open(DB_FILE, "w") as f:
        json.dump(db, f)

def get_user(user_id):
    db = load_db()
    return db.get(str(user_id), {"balance": 1000, "banned": False, "history": []})

def update_user(user_id, user_data):
    db = load_db()
    db[str(user_id)] = user_data
    save_db(db)

def change_balance(user_id, amount, action=""):
    user = get_user(user_id)
    user["balance"] += amount
    user["history"].append(f"{'+' if amount >= 0 else ''}{amount} ({action})")
    update_user(user_id, user)

def is_banned(user_id):
    return get_user(user_id).get("banned", False)

@dp.message_handler(lambda m: m.text.lower() == "–±")
async def check_balance(message: Message):
    if is_banned(message.from_user.id):
        await message.reply("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    bal = get_user(message.from_user.id)["balance"]
    await message.reply(f"–£ –≤–∞—Å {bal} —Å–Ω–µ–∂–∏–Ω–æ–∫.")

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(commands=["–≤—ã–¥–∞—Ç—å", "–æ—Ç–Ω—è—Ç—å", "–∑–∞–±–∞–Ω–∏—Ç—å", "–∏—Å—Ç–æ—Ä–∏—è", "–ø–µ—Ä–µ–≤–æ–¥"])
async def admin_commands(message: Message):
    if message.from_user.id not in ADMINS:
        return

    parts = message.text.split()
    if message.text.startswith("/–≤—ã–¥–∞—Ç—å") and len(parts) == 3:
        uid, amount = int(parts[1]), int(parts[2])
        change_balance(uid, amount, "–≤—ã–¥–∞—á–∞")
        await message.reply("–í—ã–¥–∞–Ω–æ.")
    elif message.text.startswith("/–æ—Ç–Ω—è—Ç—å") and len(parts) == 3:
        uid, amount = int(parts[1]), int(parts[2])
        change_balance(uid, -amount, "–æ—Ç–Ω—è—Ç–∏–µ")
        await message.reply("–û—Ç–Ω—è—Ç–æ.")
    elif message.text.startswith("/–∑–∞–±–∞–Ω–∏—Ç—å") and len(parts) == 2:
        uid = int(parts[1])
        user = get_user(uid)
        user["banned"] = True
        update_user(uid, user)
        await message.reply("–ó–∞–±–∞–Ω–µ–Ω.")
    elif message.text.startswith("/–∏—Å—Ç–æ—Ä–∏—è") and len(parts) == 2:
        uid = int(parts[1])
        history = get_user(uid).get("history", [])
        await message.reply("\n".join(history[-10:]) or "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
    elif message.text.startswith("/–ø–µ—Ä–µ–≤–æ–¥") and len(parts) == 3:
        to_id, amount = int(parts[1]), int(parts[2])
        from_id = message.from_user.id
        if get_user(from_id)["balance"] < amount:
            await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω–µ–∂–∏–Ω–æ–∫.")
            return
        change_balance(from_id, -amount, "–ø–µ—Ä–µ–≤–æ–¥")
        change_balance(to_id, amount, "–ø–æ–ª—É—á–µ–Ω–æ")
        await message.reply("–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω.")

# –†—É–ª–µ—Ç–∫–∞
pending_bets = {}

@dp.message_handler()
async def all_text_handler(message: Message):
    user_id = message.from_user.id
    if is_banned(user_id):
        await message.reply("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return

    text = message.text.lower().strip()
    parts = text.split()

    # –°—Ç–∞–≤–∫–∞ –Ω–∞ —Ä—É–ª–µ—Ç–∫—É
    if len(parts) == 2 and parts[0].isdigit() and (parts[1].isdigit() or parts[1] in ["odd", "even"]):
        amount = int(parts[0])
        bet = parts[1]
        bal = get_user(user_id)["balance"]
        if amount > bal:
            await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω–µ–∂–∏–Ω–æ–∫.")
            return
        pending_bets[user_id] = {"amount": amount, "bet": bet}
        await message.reply(f"–°—Ç–∞–≤–∫–∞ {amount} –Ω–∞ {bet} –ø—Ä–∏–Ω—è—Ç–∞. –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(5)
        await roulette_spin(user_id, message)
        return

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∏–Ω
    if text.startswith("–º "):
        await mines_click(message)
    elif text == "–∑–∞–±—Ä–∞—Ç—å":
        await mines_cashout(message)

# –†—É–ª–µ—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞
async def roulette_spin(user_id, message):
    data = pending_bets.pop(user_id, None)
    if not data:
        return
    number = random.randint(0, 36)
    amount = data["amount"]
    bet = data["bet"]
    win = False
    if bet == "odd" and number % 2 == 1:
        win = True
        payout = amount * 2
    elif bet == "even" and number % 2 == 0 and number != 0:
        win = True
        payout = amount * 2
    elif bet.isdigit() and int(bet) == number:
        win = True
        payout = amount * 36
    else:
        payout = 0

    if win:
        change_balance(user_id, payout, "—Ä—É–ª–µ—Ç–∫–∞ +")
        result = f"–í—ã–ø–∞–ª–æ {number}. –ü–æ–±–µ–¥–∞! +{payout} —Å–Ω–µ–∂–∏–Ω–æ–∫."
    else:
        change_balance(user_id, -amount, "—Ä—É–ª–µ—Ç–∫–∞ -")
        result = f"–í—ã–ø–∞–ª–æ {number}. –ü—Ä–æ–∏–≥—Ä—ã—à. -{amount} —Å–Ω–µ–∂–∏–Ω–æ–∫."
    await message.reply(result)

# –ú–∏–Ω—ã
active_mines = {}  # user_id: {"grid": [...], "revealed": set(), "amount": int}

def generate_mines_grid(size=5, mines=5):
    grid = [["‚¨ú" for _ in range(size)] for _ in range(size)]
    positions = random.sample(range(size*size), mines)
    for pos in positions:
        x, y = divmod(pos, size)
        grid[x][y] = "üí£"
    return grid

def render_grid(grid, revealed):
    text = ""
    for i, row in enumerate(grid):
        for j, cell in enumerate(row):
            text += cell if (i, j) in revealed or cell == "üí£" else "‚ñ™Ô∏è"
        text += "\n"
    return text

@dp.message_handler(commands=["–º–∏–Ω—ã"])
async def start_mines(message: Message):
    user_id = message.from_user.id
    if is_banned(user_id):
        await message.reply("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    bal = get_user(user_id)["balance"]
    if bal < 100:
        await message.reply("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 100 —Å–Ω–µ–∂–∏–Ω–æ–∫.")
        return
    grid = generate_mines_grid()
    active_mines[user_id] = {"grid": grid, "revealed": set(), "amount": 100}
    change_balance(user_id, -100, "—Å—Ç–∞–≤–∫–∞ –≤ –º–∏–Ω—ã")
    await message.reply("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í–≤–µ–¥–∏—Ç–µ `–º 1 2` —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–ª–µ—Ç–∫—É.\n" + render_grid(grid, set()))

async def mines_click(message: Message):
    user_id = message.from_user.id
    if user_id not in active_mines:
        await message.reply("–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ /–º–∏–Ω—ã.")
        return
    try:
        _, x, y = message.text.split()
        x, y = int(x), int(y)
    except:
        await message.reply("–§–æ—Ä–º–∞—Ç: –º x y")
        return

    data = active_mines[user_id]
    grid = data["grid"]
    revealed = data["revealed"]
    if (x, y) in revealed:
        await message.reply("–ö–ª–µ—Ç–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞.")
        return

    revealed.add((x, y))
    if grid[x][y] == "üí£":
        await message.reply("–ë—É–º! –í—ã –ø–æ–¥–æ—Ä–≤–∞–ª–∏—Å—å.\n" + render_grid(grid, revealed))
        del active_mines[user_id]
    else:
        await message.reply("–£—Å–ø–µ—à–Ω–æ!\n" + render_grid(grid, revealed))

async def mines_cashout(message: Message):
    user_id = message.from_user.id
    if user_id not in active_mines:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
        return
    data = active_mines.pop(user_id)
    safe_cells = len(data["revealed"])
    winnings = int(data["amount"] * (1 + safe_cells * 0.42))
    change_balance(user_id, winnings, "–≤—ã–∏–≥—Ä—ã—à –º–∏–Ω—ã")
    await message.reply(f"–í—ã –∑–∞–±—Ä–∞–ª–∏ {winnings} —Å–Ω–µ–∂–∏–Ω–æ–∫ –∑–∞ {safe_cells} –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
