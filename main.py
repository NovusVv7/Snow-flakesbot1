import os
import logging
import json
import random
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.exceptions import ChatNotFound

# Configure logging
logging.basicConfig(level=logging.INFO)

# Get the API token from the environment variable
TOKEN = os.getenv("API_TOKEN")
if not TOKEN:
    logging.error("API_TOKEN environment variable not set!")
    exit(1) # Exit if the token is missing

# Initialize the bot with the token from the environment
bot = Bot(TOKEN)
dp = Dispatcher(bot)

DB_FILE = "db.json"
ADMIN_ID = 6359584002  # –í–∞—à ID

def load_db():
    try:
        if os.path.exists(DB_FILE):
            with open(DB_FILE, "r") as f:
                return json.load(f)
    except FileNotFoundError:
        logging.warning("Database file not found. Creating a new one.")
        return {"users": {}, "banned": [], "history": {}}
    except json.JSONDecodeError:
        logging.error("Error decoding JSON from database file. Using default database.")
        return {"users": {}, "banned": [], "history": {}}
    return {"users": {}, "banned": [], "history": {}}

def save_db(db):
    try:
        with open(DB_FILE, "w") as f:
            json.dump(db, f, indent=4)
    except Exception as e:
        logging.error(f"Error saving database: {e}")

db = load_db()

def get_user_id_from_username(username):
    for user_id, data in db["users"].items():
        if "username" in data and data["username"] == username:
            return user_id
    return None

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    user_id = str(message.from_user.id)
    username = message.from_user.username

    if user_id in db["banned"]:
        await message.answer("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return

    if user_id not in db["users"]:
        db["users"][user_id] = {"snowflakes": 1000, "username": username}
        save_db(db)
    else:
      db["users"][user_id]["username"] = username
      save_db(db)
    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —É –≤–∞—Å {db['users'][user_id]['snowflakes']} —Å–Ω–µ–∂–∏–Ω–æ–∫.")

@dp.message_handler(commands=["balance"])
async def balance(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id in db["banned"]:
        await message.answer("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    if user_id not in db["users"]:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return
    await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {db['users'][user_id]['snowflakes']} —Å–Ω–µ–∂–∏–Ω–æ–∫.")

@dp.message_handler(lambda m: m.text.lower().startswith("–ø "))
async def pay(message: types.Message):
    user_id = str(message.from_user.id)
    parts = message.text.split()

    if len(parts) != 3:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: –ü [—Å—É–º–º–∞] [username/id]")
        return

    amount_str, target = parts[1], parts[2]

    if not amount_str.isdigit():
        await message.reply("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    amount = int(amount_str)

    if user_id not in db["users"]:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return

    if db["users"][user_id]["snowflakes"] < amount:
        await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω–µ–∂–∏–Ω–æ–∫.")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —Ü–µ–ª–∏:
    if target.isdigit():
        target_id = target  # –≠—Ç–æ ID
    else:
        target_id = get_user_id_from_username(target)  # –≠—Ç–æ username

        if target_id is None:
            await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

    if target_id not in db["users"]:
        db["users"][target_id] = {"snowflakes": 1000, "username": None}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db["users"][user_id]["snowflakes"] -= amount
    db["users"][target_id]["snowflakes"] += amount
    await message.reply(f"–í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ {amount} —Å–Ω–µ–∂–∏–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target}.")
    save_db(db)

@dp.message_handler(lambda m: m.text.lower().startswith("–≥–æ"))
async def roulette(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id in db["banned"]:
        await message.answer("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return

    if user_id not in db["users"]:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return

    text = message.text.lower().split()
    if len(text) != 2 or not text[1].isdigit():
        await message.reply("–ü—Ä–∏–º–µ—Ä: –≥–æ [—Å—Ç–∞–≤–∫–∞] (—Å—Ç–∞–≤–∫–∞ - —á–∏—Å–ª–æ –æ—Ç 1)")
        return

    bet = int(text[1])
    if db["users"][user_id]["snowflakes"] < bet:
        await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω–µ–∂–∏–Ω–æ–∫.")
        return

    await message.reply("–†—É–ª–µ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 7 —Å–µ–∫—É–Ω–¥...")
    await asyncio.sleep(7)

    result = random.randint(0, 36)
    if result == 0:
        winnings = bet * 36
    else:
        winnings = 0 # –ù–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞

    if winnings > 0:
        db["users"][user_id]["snowflakes"] += winnings
        await message.reply(f"–í—ã–ø–∞–ª–æ {result}! –ü–æ–±–µ–¥–∞! +{winnings} —Å–Ω–µ–∂–∏–Ω–æ–∫.")
    else:
        db["users"][user_id]["snowflakes"] -= bet
        await message.reply(f"–í—ã–ø–∞–ª–æ {result}. –ü—Ä–æ–∏–≥—Ä—ã—à. -{bet} —Å–Ω–µ–∂–∏–Ω–æ–∫.")

    save_db(db)

mines_games = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä —Å –º–∏–Ω–∞–º–∏

@dp.message_handler(lambda m: m.text.lower().startswith("–º–∏–Ω—ã"))
async def start_mines(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id in db["banned"]:
        await message.answer("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return

    if user_id not in db["users"]:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return

    text = message.text.lower().split()

    if len(text) != 2 or not text[1].isdigit():
        await message.reply("–ü—Ä–∏–º–µ—Ä: –º–∏–Ω—ã [—Å—Ç–∞–≤–∫–∞]")
        return

    bet = int(text[1])

    if db["users"][user_id]["snowflakes"] < bet:
        await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω–µ–∂–∏–Ω–æ–∫.")
        return

    mines_games[user_id] = {
        "bet": bet,
        "coef": 1.0, # –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        "clicks": 0, # –ö–æ–ª-–≤–æ –∫–ª–∏–∫–æ–≤
        "board": create_mines_board()
    }
    db["users"][user_id]["snowflakes"] -= bet
    save_db(db)
    await send_mines_board(message.chat.id, user_id)


def create_mines_board():
    board = []
    mines_positions = random.sample(range(25), 5) # 5 –º–∏–Ω –Ω–∞ –ø–æ–ª–µ 5x5
    for i in range(25):
        if i in mines_positions:
            board.append("üí£")
        else:
            board.append("‚¨úÔ∏è")
    return board

async def send_mines_board(chat_id, user_id):
    game = mines_games[user_id]
    keyboard = types.InlineKeyboardMarkup(row_width=5)
    for i in range(25):
        callback_data = f"mines_click_{user_id}_{i}"
        keyboard.add(types.InlineKeyboardButton(game["board"][i], callback_data=callback_data))
    keyboard.add(types.InlineKeyboardButton(f"–ó–∞–±—Ä–∞—Ç—å x{game['coef']:.2f}", callback_data=f"mines_take_{user_id}"))
    await bot.send_message(chat_id, f"–°—Ç–∞–≤–∫–∞: {game['bet']} —Å–Ω–µ–∂–∏–Ω–æ–∫\n–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x{game['coef']:.2f}", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('mines_click_'))
async def process_mines_click(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data.split("_")
    index = int(data[3]) # –ò–Ω–¥–µ–∫—Å –∫–ª–µ—Ç–∫–∏

    game = mines_games[str(user_id)]

    if game["board"][index] == "üí£": # –í–∑–æ—Ä–≤–∞–ª–∏—Å—å
        del mines_games[str(user_id)]
        await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=f"–í–∑—Ä—ã–≤! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {game['bet']} —Å–Ω–µ–∂–∏–Ω–æ–∫.")
    else: # –£—Å–ø–µ—à–Ω—ã–π –∫–ª–∏–∫
      game["board"][index] = "‚úÖ" # –ü–æ–º–µ—á–∞–µ–º –∫–ª–µ—Ç–∫—É
      game["clicks"] += 1
      game["coef"] = calculate_mines_coef(game["clicks"])
      await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text="–£—Å–ø–µ—à–Ω—ã–π –∫–ª–∏–∫!")
      await send_mines_board(callback_query.message.chat.id, str(user_id))

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('mines_take_'))
async def process_mines_take(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    game = mines_games[str(user_id)]
    winnings = int(game["bet"] * game["coef"])
    db["users"][str(user_id)]["snowflakes"] += winnings
    save_db(db)
    del mines_games[str(user_id)] # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É
    await bot.send_message(callback_query.message.chat.id, f"–í—ã –∑–∞–±—Ä–∞–ª–∏ {winnings} —Å–Ω–µ–∂–∏–Ω–æ–∫!")

def calculate_mines_coef(clicks):
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ (–Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
    coefficient = 1.0
    for i in range(clicks):
        coefficient += (85 - coefficient) * 0.05 # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è, —Å—Ç—Ä–µ–º—è—Å—å –∫ 86
    return coefficient

@dp.message_handler(commands=["admin"])
async def admin_panel(message: types.Message):
  user_id = message.from_user.id

  if user_id == ADMIN_ID:
      await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω!")
  else:
      await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")

# === –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===

@dp.message_handler(commands=["take"])
async def admin_take(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    if message.reply_to_message: # –ó–∞–±–∏—Ä–∞–µ–º —É –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = str(message.reply_to_message.from_user.id)
    else:
        parts = message.text.split()
        if len(parts) < 2:
            await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /take [username/id]")
            return

        target = parts[1]
        if target.isdigit():
            user_id = target
        else:
            user_id = get_user_id_from_username(target)
            if not user_id:
                await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

    if user_id not in db["users"]:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    amount = db["users"][user_id]["snowflakes"]
    db["users"][user_id]["snowflakes"] = 0  # –ó–∞–±–∏—Ä–∞–µ–º –≤—Å—ë
    save_db(db)
    await message.reply(f"–ó–∞–±—Ä–∞–Ω–æ {amount} —Å–Ω–µ–∂–∏–Ω–æ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

@dp.message_handler(commands=["ban"])
async def admin_ban(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    if message.reply_to_message:
        user_id = str(message.reply_to_message.from_user.id)
    else:
        parts = message.text.split()
        if len(parts) < 2:
            await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /ban [username/id]")
            return

        target = parts[1]
        if target.isdigit():
            user_id = target
        else:
            user_id = get_user_id_from_username(target)
            if not user_id:
                await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

    db["banned"].append(user_id)
    save_db(db)
    await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω.")

@dp.message_handler(commands=["give"])
async def admin_give(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    parts = message.text.split()
    if len(parts) < 3:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /give [username/id] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")
        return

    target = parts[1]
    amount_str = parts[2]

    if not amount_str.isdigit():
        await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    amount = int(amount_str)

    if target.isdigit():
        user_id = target
    else:
        user_id = get_user_id_from_username(target)
        if not user_id:
            await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

    if user_id not in db["users"]:
      db["users"][user_id] = {"snowflakes": 0, "username": None}

    db["users"][user_id]["snowflakes"] += amount
    save_db(db)
    await message.reply(f"–í—ã–¥–∞–Ω–æ {amount} —Å–Ω–µ–∂–∏–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target}.")

@dp.message_handler(commands=["top"])
async def top_balance(message: types.Message):
    users = db["users"]
    sorted_users = sorted(users.items(), key=lambda item: item[1]["snowflakes"], reverse=True)

    top_users = sorted_users[:10] # –¢–æ–ø 10

    response = "–¢–æ–ø 10 –±–æ–≥–∞—Ç–µ–π—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤:\n"
    for i, (user_id, data) in enumerate(top_users):
        username = data.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π") # –ü–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–Ω–µ–π–º
        response += f"{i+1}. {username} ({user_id}): {data['snowflakes']} —Å–Ω–µ–∂–∏–Ω–æ–∫\n"

    await message.reply(response)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
