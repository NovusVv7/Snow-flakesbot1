from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
import sqlite3, random, time

API_TOKEN = "7561318621:AAHLIMv1cQPXSkBYWkFCeys5XsXg2c4M3fc"
CREATOR_ID =6359584002  # –í–∞—à Telegram ID

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class GameState(StatesGroup):
    roulette_waiting = State()
    mines_settings = State()
    mines_playing = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("data.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    snowflakes INTEGER DEFAULT 0,
    last_bonus INTEGER DEFAULT 0
)
""")
conn.commit()

# –†–∞–±–æ—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º
BONUS_INTERVAL = 5 * 60 * 60  # 5 —á–∞—Å–æ–≤

def get_balance(user_id):
    cursor.execute("SELECT snowflakes FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 0

def update_balance(user_id, amount):
    cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,))
    if cursor.fetchone():
        cursor.execute("UPDATE users SET snowflakes = snowflakes + ? WHERE user_id = ?", (amount, user_id))
    else:
        cursor.execute("INSERT INTO users (user_id, snowflakes) VALUES (?, ?)", (user_id, amount))
    conn.commit()

def try_give_bonus(user_id):
    now = int(time.time())
    cursor.execute("SELECT last_bonus FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    last = result[0] if result else 0
    
    if now - last >= BONUS_INTERVAL:
        bonus = random.randint(5000, 20000)
        update_balance(user_id, bonus)
        cursor.execute("UPDATE users SET last_bonus = ? WHERE user_id = ?", (now, user_id))
        conn.commit()
        return bonus
    return None

# –ö–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞—Ç–µ–ª—è
@dp.message_handler(commands=['add'])
async def add_snowflakes(message: Message):
    if message.from_user.id != CREATOR_ID:
        return
    try:
        _, user_id, amount = message.text.split()
        update_balance(int(user_id), int(amount))
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} —Å–Ω–µ–∂–∏–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except:
        await message.answer("–§–æ—Ä–º–∞—Ç: /add [user_id] [amount]")

@dp.message_handler(commands=['remove'])
async def remove_snowflakes(message: Message):
    if message.from_user.id != CREATOR_ID:
        return
    try:
        _, user_id, amount = message.text.split()
        update_balance(int(user_id), -int(amount))
        await message.answer(f"‚úÖ –ò–∑—ä—è—Ç–æ {amount} —Å–Ω–µ–∂–∏–Ω–æ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except:
        await message.answer("–§–æ—Ä–º–∞—Ç: /remove [user_id] [amount]")

@dp.message_handler(commands=['balance'])
async def check_balance(message: Message):
    if message.from_user.id != CREATOR_ID:
        return
    try:
        _, user_id = message.text.split()
        balance = get_balance(int(user_id))
        await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {balance}‚ùÑÔ∏è")
    except:
        await message.answer("–§–æ—Ä–º–∞—Ç: /balance [user_id]")

@dp.message_handler(commands=['start'])
async def cmd_start(message: Message):
    update_balance(message.from_user.id, 5000)
    text = (
        "‚ùÑÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SnowCasino! ‚ùÑÔ∏è\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚ñ∂Ô∏è –≥–æ - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ —Ä—É–ª–µ—Ç–∫—É\n"
        "üí£ –º–∏–Ω—ã - –∏–≥—Ä–∞ –≤ –º–∏–Ω—ã\n"
        "üí∞ –± - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "üéÅ /bonus - –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å (—Ä–∞–∑ –≤ 5 —á–∞—Å–æ–≤)"
    )
    await message.answer(text)

@dp.message_handler(commands=['bonus'])
async def cmd_bonus(message: Message):
    bonus = try_give_bonus(message.from_user.id)
    balance = get_balance(message.from_user.id)
    if bonus:
        await message.answer(f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å: +{bonus}‚ùÑÔ∏è\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}‚ùÑÔ∏è")
    else:
        await message.answer("‚è≥ –ë–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑ –≤ 5 —á–∞—Å–æ–≤!")

@dp.message_handler(lambda m: m.text.lower() == '–±')
async def show_balance(message: Message):
    balance = get_balance(message.from_user.id)
    await message.answer(f"‚ùÑÔ∏è –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Å–Ω–µ–∂–∏–Ω–æ–∫")

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä—É–ª–µ—Ç–∫–∞
ROULETTE_PAYOUTS = {
    'number': 35,
    'even_odd': 1,
    'color': 1,
    'dozen': 2
}

@dp.message_handler(lambda m: m.text.lower() == "–≥–æ")
async def go_command(message: Message):
    await GameState.roulette_waiting.set()
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton('–ö—Ä–∞—Å–Ω–æ–µ'), KeyboardButton('–ß—ë—Ä–Ω–æ–µ'))
    markup.add(KeyboardButton('–ß—ë—Ç–Ω–æ–µ'), KeyboardButton('–ù–µ—á—ë—Ç–Ω–æ–µ'))
    await message.answer(
        "üé∞ –†–µ–∂–∏–º —Ä—É–ª–µ—Ç–∫–∏\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –∏ —Ç–∏–ø (–ø—Ä–∏–º–µ—Ä—ã):\n"
        "‚Ä¢ 100 –∫—Ä–∞—Å–Ω–æ–µ\n"
        "‚Ä¢ 50 12 (–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ)\n"
        "‚Ä¢ 200 1-12 (–ø–µ—Ä–≤—ã–π –¥–µ—Å—è—Ç–æ–∫)",
        reply_markup=markup
    )

@dp.message_handler(state=GameState.roulette_waiting)
async def handle_roulette_bet(message: Message, state: FSMContext):
    try:
        parts = message.text.lower().split()
        if len(parts) < 2:
            raise ValueError
        
        amount = int(parts[0])
        bet_type = ' '.join(parts[1:])
        balance = get_balance(message.from_user.id)
        
        if amount < 10:
            await message.reply("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 10‚ùÑÔ∏è")
            return
        if balance < amount:
            await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω–µ–∂–∏–Ω–æ–∫‚ùÑÔ∏è")
            return
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result = random.randint(0, 36)
        is_red = result in {1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
        win = False
        multiplier = 1
        
        try: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
            number_bet = int(bet_type)
            win = (number_bet == result)
            multiplier = ROULETTE_PAYOUTS['number']
        except:
            if bet_type in ['–∫—Ä–∞—Å–Ω–æ–µ', 'red']:
                win = is_red and result != 0
                multiplier = ROULETTE_PAYOUTS['color']
            elif bet_type in ['—á—ë—Ä–Ω–æ–µ', 'black']:
                win = not is_red and result != 0
                multiplier = ROULETTE_PAYOUTS['color']
            elif bet_type in ['—á—ë—Ç–Ω–æ–µ', 'even']:
                win = result % 2 == 0 and result != 0
                multiplier = ROULETTE_PAYOUTS['even_odd']
            elif bet_type in ['–Ω–µ—á—ë—Ç–Ω–æ–µ', 'odd']:
                win = result % 2 == 1
                multiplier = ROULETTE_PAYOUTS['even_odd']
            elif '-' in bet_type:
                start, end = map(int, bet_type.split('-'))
                win = start <= result <= end
                multiplier = ROULETTE_PAYOUTS['dozen']
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
        color = 'üî¥' if is_red else ('üü¢' if result == 0 else '‚ö´')
        
        if win:
            win_amount = amount * multiplier
            update_balance(message.from_user.id, win_amount)
            await message.answer(
                f"{color} –í—ã–ø–∞–ª–æ {result}\n"
                f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}‚ùÑÔ∏è (x{multiplier})"
            )
        else:
            update_balance(message.from_user.id, -amount)
            await message.answer(
                f"{color} –í—ã–ø–∞–ª–æ {result}\n"
                f"üí∏ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {amount}‚ùÑÔ∏è"
            )
        await state.finish()
    except:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç–∞–≤–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
        await state.finish()

# –£–ª—É—á—à–µ–Ω–Ω—ã–µ –º–∏–Ω—ã
@dp.message_handler(lambda m: m.text.lower() == "–º–∏–Ω—ã")
async def mines_game(message: Message):
    await GameState.mines_settings.set()
    await message.answer(
        "üí£ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã –ú–∏–Ω—ã\n"
        "–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
        "‚Ä¢ –°—Ç–∞–≤–∫—É\n‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–ª—è (3-25)\n‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω (1-10)\n"
        "–ü—Ä–∏–º–µ—Ä: 1000 15 3"
    )

@dp.message_handler(state=GameState.mines_settings)
async def setup_mines_game(message: Message, state: FSMContext):
    try:
        bet, size, mines = map(int, message.text.split())
        if not (10 <= bet <= 100000):
            await message.reply("üö´ –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ 100000‚ùÑÔ∏è")
            return
        if not (3 <= size <= 25):
            await message.reply("üö´ –†–∞–∑–º–µ—Ä –ø–æ–ª—è –æ—Ç 3 –¥–æ 25 –∫–ª–µ—Ç–æ–∫")
            return
        if not (1 <= mines <= min(10, size-1)):
            await message.reply("üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω")
            return
        
        if get_balance(message.from_user.id) < bet:
            await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏")
            return
        
        await state.update_data(
            bet=bet,
            size=size,
            mines=mines,
            opened=[],
            mines_positions=[],
            multiplier=1.0
        )
        await GameState.mines_playing.set()
        
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(KeyboardButton('–ó–∞–±—Ä–∞—Ç—å üèÜ'))
        
        await message.answer(
            f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n"
            f"üèÅ –°—Ç–∞–≤–∫–∞: {bet}‚ùÑÔ∏è\n"
            f"üî¢ –ü–æ–ª–µ: {size} –∫–ª–µ—Ç–æ–∫\n"
            f"üí£ –ú–∏–Ω—ã: {mines}\n"
            f"–¢–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: x1.0",
            reply_markup=markup
        )
        await show_mines_field(message, state)
    except:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: 1000 15 3")

async def show_mines_field(message: Message, state: FSMContext):
    data = await state.get_data()
    size = data['size']
    opened = data['opened']
    mines = data['mines_positions']
    
    field = ""
    for i in range(size):
        if i in opened:
            if i in mines:
                field += "üí• "
            else:
                field += "üü© "
        else:
            field += "‚¨ú "
        if (i + 1) % 5 == 0:
            field += "\n"
    
    await message.answer(f"–ü–æ–ª–µ ({size} –∫–ª–µ—Ç–æ–∫):\n{field}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É (1-{size}):")

@dp.message_handler(state=GameState.mines_playing, text='–ó–∞–±—Ä–∞—Ç—å üèÜ')
async def take_mines_win(message: Message, state: FSMContext):
    data = await state.get_data()
    win_amount = int(data['bet'] * data['multiplier'])
    update_balance(message.from_user.id, win_amount)
    await message.answer(
        f"üèÜ –í—ã –∑–∞–±—Ä–∞–ª–∏ –≤—ã–∏–≥—Ä—ã—à!\n"
        f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ: {win_amount}‚ùÑÔ∏è\n"
        f"üéØ –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{data['multiplier']:.2f}",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.finish()

@dp.message_handler(state=GameState.mines_playing)
async def process_mines_move(message: Message, state: FSMContext):
    try:
        cell = int(message.text) - 1
        data = await state.get_data()
        
        if cell < 0 or cell >= data['size']:
            await message.reply("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏!")
            return
            
        if cell in data['opened']:
            await message.reply("‚ÑπÔ∏è –≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞!")
            return
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞
        if not data['mines_positions']:
            available = [i for i in range(data['size']) if i != cell]
            mines = random.sample(available, data['mines'])
            await state.update_data(mines_positions=mines)
        
        opened = data['opened'] + [cell]
        mines = data['mines_positions']
        
        if cell in mines:
            update_balance(message.from_user.id, -data['bet'])
            await message.answer(
                "üí• –í—ã –ø–æ–¥–æ—Ä–≤–∞–ª–∏—Å—å –Ω–∞ –º–∏–Ω–µ!\n"
                f"üí∏ –ü–æ—Ç–µ—Ä—è–Ω–æ: {data['bet']}‚ùÑÔ∏è",
                reply_markup=types.ReplyKeyboardRemove()
            )
            await state.finish()
            return
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è
        multiplier = data['multiplier'] * 1.5
        await state.update_data(opened=opened, multiplier=multiplier)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
        if len(opened) == data['size'] - data['mines']:
            win_amount = int(data['bet'] * multiplier)
            update_balance(message.from_user.id, win_amount)
            await message.answer(
                f"üéâ –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –≤—Å–µ –∫–ª–µ—Ç–∫–∏!\n"
                f"üí∞ –í—ã–∏–≥—Ä—ã—à: {win_amount}‚ùÑÔ∏è\n"
                f"üéØ –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{multiplier:.2f}",
                reply_markup=types.ReplyKeyboardRemove()
            )
            await state.finish()
        else:
            await state.update_data(multiplier=multiplier)
            await message.answer(f"–¢–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: x{multiplier:.2f}")
            await show_mines_field(message, state)
    except:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏ –∏–ª–∏ '–ó–∞–±—Ä–∞—Ç—å'")

@dp.message_handler(lambda m: m.text.lower().startswith("–ø–µ—Ä–µ–¥–∞—Ç—å "))
async def transfer_currency(message: Message):
    try:
        parts = message.text.split()
        if len(parts) != 3:
            raise ValueError
        
        recipient_id = int(parts[1])
        amount = int(parts[2])
        
        if amount <= 0:
            await message.reply("üö´ –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return
            
        sender_id = message.from_user.id
        if sender_id == recipient_id:
            await message.reply("üö´ –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å–µ–±–µ!")
            return
            
        if get_balance(sender_id) < amount:
            await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!")
            return
            
        update_balance(sender_id, -amount)
        update_balance(recipient_id, amount)
        await message.reply(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ {amount}‚ùÑÔ∏è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
    except:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: –ü–µ—Ä–µ–¥–∞—Ç—å [ID] [–°—É–º–º–∞]")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)