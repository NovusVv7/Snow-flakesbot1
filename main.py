import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler
import sqlite3
import random
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('snowflakes.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS users
             (user_id INTEGER PRIMARY KEY, 
              username TEXT,
              snowflakes INTEGER DEFAULT 0,
              banned BOOLEAN DEFAULT FALSE)''')
conn.commit()

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
CREATOR_ID = config.CREATOR_ID
active_bets = {}
PAYOUTS = {
    1: 35,   # –ü—Ä—è–º–∞—è —Å—Ç–∞–≤–∫–∞
    2: 17,   # –°–ø–ª–∏—Ç
    3: 11,   # –°—Ç—Ä–∏—Ç
    4: 8,    # –£–≥–æ–ª
    6: 5,    # –õ–∏–Ω–∏—è
    12: 2,   # –î—é–∂–∏–Ω—ã/–∫–æ–ª–æ–Ω–∫–∏
    18: 1    # –ß–µ—Ç/–Ω–µ—á–µ—Ç, –∫—Ä–∞—Å–Ω–æ–µ/—á–µ—Ä–Ω–æ–µ
}

def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    username = update.effective_user.username
    cursor.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
    conn.commit()
    update.message.reply_text("‚ùÑÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Snowflake Bot! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
                             "üíé –ë–∞–ª–∞–Ω—Å - –ø–æ–∫–∞–∑–∞—Ç—å —Å–Ω–µ–∂–∏–Ω–∫–∏\n"
                             "üé∞ –†—É–ª–µ—Ç–∫–∞ [—Å—É–º–º–∞] [—á–∏—Å–ª–∞/–¥–∏–∞–ø–∞–∑–æ–Ω—ã]\n"
                             "üéÅ –ü–µ—Ä–µ–¥–∞—Ç—å [@—é–∑–µ—Ä] [—Å—É–º–º–∞]\n"
                             "‚ùå –û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É")

def balance(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    snowflakes = cursor.execute("SELECT snowflakes FROM users WHERE user_id=?", (user_id,)).fetchone()[0]
    update.message.reply_text(f"‚ùÑÔ∏è –í–∞—à –±–∞–ª–∞–Ω—Å: {snowflakes} —Å–Ω–µ–∂–∏–Ω–æ–∫")

def transfer(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    args = update.message.text.split()[1:]
    
    if len(args) != 2 or not args[1].isdigit():
        update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: –ü–µ—Ä–µ–¥–∞—Ç—å @—é–∑–µ—Ä —Å—É–º–º–∞")
        return
    
    recipient_username = args[0].lstrip('@')
    amount = int(args[1])
    
    recipient = cursor.execute("SELECT user_id, snowflakes FROM users WHERE username=?", 
                             (recipient_username,)).fetchone()
    
    if not recipient:
        update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    sender_balance = cursor.execute("SELECT snowflakes FROM users WHERE user_id=?", (user_id,)).fetchone()[0]
    
    if sender_balance < amount:
        update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω–µ–∂–∏–Ω–æ–∫")
        return
        
    cursor.execute("UPDATE users SET snowflakes = snowflakes - ? WHERE user_id=?", (amount, user_id))
    cursor.execute("UPDATE users SET snowflakes = snowflakes + ? WHERE user_id=?", (amount, recipient[0]))
    conn.commit()
    update.message.reply_text(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ {amount} —Å–Ω–µ–∂–∏–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{recipient_username}")

def give_snowflakes(update: Update, context: CallbackContext):
    if update.effective_user.id != CREATOR_ID:
        return
    
    args = update.message.text.split()[1:]
    if len(args) != 2 or not args[1].isdigit():
        update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /give @—é–∑–µ—Ä —Å—É–º–º–∞")
        return
    
    username = args[0].lstrip('@')
    amount = int(args[1])
    
    cursor.execute("UPDATE users SET snowflakes = snowflakes + ? WHERE username=?", (amount, username))
    conn.commit()
    update.message.reply_text(f"‚úÖ –í—ã–¥–∞–Ω–æ {amount} —Å–Ω–µ–∂–∏–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}")

def take_snowflakes(update: Update, context: CallbackContext):
    if update.effective_user.id != CREATOR_ID:
        return
    
    args = update.message.text.split()[1:]
    if len(args) != 2 or not args[1].isdigit():
        update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /take @—é–∑–µ—Ä —Å—É–º–º–∞")
        return
    
    username = args[0].lstrip('@')
    amount = int(args[1])
    
    cursor.execute("UPDATE users SET snowflakes = snowflakes - ? WHERE username=?", (amount, username))
    conn.commit()
    update.message.reply_text(f"‚úÖ –ò–∑—ä—è—Ç–æ {amount} —Å–Ω–µ–∂–∏–Ω–æ–∫ —É @{username}")

def ban_user(update: Update, context: CallbackContext):
    if update.effective_user.id != CREATOR_ID:
        return
    
    username = update.message.text.split()[1].lstrip('@')
    cursor.execute("UPDATE users SET banned = TRUE WHERE username=?", (username,))
    conn.commit()
    update.message.reply_text(f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–±–∞–Ω–µ–Ω")

def roulette(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    args = update.message.text.split()[1:]
    
    if args and args[0].lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel']:
        if user_id in active_bets:
            del active_bets[user_id]
            update.message.reply_text("‚ùÑÔ∏è –°—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
        else:
            update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        return
    
    if len(args) < 2:
        update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: –†—É–ª–µ—Ç–∫–∞ [—Å—Ç–∞–≤–∫–∞] [—á–∏—Å–ª–∞/–¥–∏–∞–ø–∞–∑–æ–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª]\n"
                                 "–ü—Ä–∏–º–µ—Ä: –†—É–ª–µ—Ç–∫–∞ 1000 0 2 5 14-17\n"
                                 "–î–ª—è –æ—Ç–º–µ–Ω—ã: –†—É–ª–µ—Ç–∫–∞ –æ—Ç–º–µ–Ω–∞")
        return
    
    try:
        bet = int(args[0])
        if bet < 10:
            update.message.reply_text("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 10 —Å–Ω–µ–∂–∏–Ω–æ–∫")
            return
    except ValueError:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏")
        return
    
    active_bets[user_id] = {
        'bet_amount': bet,
        'numbers': set(),
        'ranges': []
    }
    
    valid = True
    for item in args[1:]:
        if '-' in item:
            try:
                start, end = map(int, item.split('-'))
                if 0 <= start <= end <= 36:
                    active_bets[user_id]['ranges'].append((start, end))
                else:
                    valid = False
            except:
                valid = False
        elif item.isdigit():
            num = int(item)
            if 0 <= num <= 36:
                active_bets[user_id]['numbers'].add(num)
            else:
                valid = False
        else:
            valid = False
        
        if not valid:
            del active_bets[user_id]
            update.message.reply_text(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {item}")
            return
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm_bet'),
         InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_bet')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    bet_info = "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:\n"
    if active_bets[user_id]['numbers']:
        bet_info += f"–ß–∏—Å–ª–∞: {', '.join(map(str, sorted(active_bets[user_id]['numbers'])))}\n"
    for r in active_bets[user_id]['ranges']:
        bet_info += f"–î–∏–∞–ø–∞–∑–æ–Ω: {r[0]}-{r[1]}\n"
    
    update.message.reply_text(
        f"‚ùÑÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É:\n"
        f"–°—É–º–º–∞: {bet} —Å–Ω–µ–∂–∏–Ω–æ–∫\n"
        f"{bet_info}\n"
        f"–£ –≤–∞—Å –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!",
        reply_markup=reply_markup
    )

def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    
    if data == 'confirm_bet':
        if user_id not in active_bets:
            query.answer("‚ùå –°—Ç–∞–≤–∫–∞ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
            
        bet_data = active_bets[user_id]
        del active_bets[user_id]
        
        user_balance = cursor.execute("SELECT snowflakes, banned FROM users WHERE user_id=?", (user_id,)).fetchone()
        
        if user_balance[1]:
            query.edit_message_text("‚õî –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!")
            return
            
        if user_balance[0] < bet_data['bet_amount']:
            query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω–µ–∂–∏–Ω–æ–∫")
            return
        
        total_numbers = len(bet_data['numbers'])
        for r in bet_data['ranges']:
            total_numbers += r[1] - r[0] + 1
        
        result = random.randint(0, 36)
        red_numbers = [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36]
        color = '–∫—Ä–∞—Å–Ω–æ–µ' if result in red_numbers else '—á–µ—Ä–Ω–æ–µ' if result !=0 else '–∑–µ–ª–µ–Ω–æ–µ'
        win = False
        
        if result in bet_data['numbers']:
            win = True
        else:
            for r in bet_data['ranges']:
                if r[0] <= result <= r[1]:
                    win = True
                    break
        
        closest_payout = min(PAYOUTS.keys(), key=lambda x: abs(x - total_numbers))
        payout_multiplier = PAYOUTS[closest_payout] if closest_payout <= total_numbers else 0
        
        if win:
            payout = payout_multiplier * bet_data['bet_amount']
            cursor.execute("UPDATE users SET snowflakes = snowflakes + ? WHERE user_id=?", 
                         (payout, user_id))
            conn.commit()
            message = f"üéâ –í—ã–∏–≥—Ä—ã—à! –í—ã–ø–∞–ª–æ: {result} ({color})\nüí∞ +{payout} —Å–Ω–µ–∂–∏–Ω–æ–∫!"
        else:
            cursor.execute("UPDATE users SET snowflakes = snowflakes - ? WHERE user_id=?", 
                         (bet_data['bet_amount'], user_id))
            conn.commit()
            message = f"üíî –ü—Ä–æ–∏–≥—Ä—ã—à! –í—ã–ø–∞–ª–æ: {result} ({color})\n‚ùÑÔ∏è -{bet_data['bet_amount']} —Å–Ω–µ–∂–∏–Ω–æ–∫"
        
        query.edit_message_text(message)
        
    elif data == 'cancel_bet':
        if user_id in active_bets:
            del active_bets[user_id]
            query.edit_message_text("‚ùÑÔ∏è –°—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        else:
            query.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–∞–≤–∫–∏")

def main():
    updater = Updater(config.TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.regex(r'^–±–∞–ª–∞–Ω—Å$'), balance))
    dp.add_handler(MessageHandler(Filters.regex(r'^–ø–µ—Ä–µ–¥–∞—Ç—å '), transfer))
    dp.add_handler(MessageHandler(Filters.regex(r'^—Ä—É–ª–µ—Ç–∫–∞ '), roulette))
    dp.add_handler(CallbackQueryHandler(button_handler))
    
    dp.add_handler(CommandHandler("give", give_snowflakes))
    dp.add_handler(CommandHandler("take", take_snowflakes))
    dp.add_handler(CommandHandler("ban", ban_user))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()