from aiogram import types
from aiogram.dispatcher.filters import Text
from database import get_user


async def handle_profile(message: types.Message):
    user_id = message.from_user.id
    user = get_user(user_id)

    if not user:
        await message.reply("‚ùó–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!\n–ù–∞–ø–∏—à–∏ /start")
        return

    user_id, username, balance, level, referrer_id = user
    profile_text = (
        f"üòä <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üåü <b>ID:</b> {user_id}\n"
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance} –∫—Ä—É–Ω–Ω–æ–≤\n"
        f"üîÆ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level}\n"
    )

    if referrer_id:
        referrer = get_user(referrer_id)
        referrer_name = referrer[1] if referrer else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        profile_text += f"üõê <b>–ü—Ä–∏–≥–ª–∞—Å–∏–ª:</b> {referrer_name}"

    await message.reply(profile_text, parse_mode="HTML")


async def handle_other_profile(message: types.Message):
    try:
        target_user_id = int(message.text.strip())
        user = get_user(target_user_id)

        if not user:
            await message.reply("‚ùó–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        user_id, username, balance, level, referrer_id = user
        profile_text = (
            f"üìÑ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}</b>\n\n"
            f"üåü <b>ID:</b> {user_id}\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance} –∫—Ä—É–Ω–Ω–æ–≤\n"
            f"üîÆ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level}\n"
        )

        if referrer_id:
            referrer = get_user(referrer_id)
            referrer_name = referrer[1] if referrer else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            profile_text += f"üõê <b>–ü—Ä–∏–≥–ª–∞—Å–∏–ª:</b> {referrer_name}"

        await message.reply(profile_text, parse_mode="HTML")
    except ValueError:
        await message.reply("‚ùó–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")

def add_experience(user_id: int, amount: int):
    """–ù–∞—á–∏—Å–ª–∏—Ç—å –æ–ø—ã—Ç –∏–≥—Ä–æ–∫—É –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è"""
    user = get_user(user_id)
    if not user:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    current_exp = user.get('experience', 0) or 0
    new_exp = current_exp + amount
    update_experience(user_id, new_exp)

    user['experience'] = new_exp
    level_up = check_level_up(user)

    return level_up

def register_profile(dp):
    dp.register_message_handler(handle_profile, Text(equals="–ø—Ä–æ—Ñ–∏–ª—å", ignore_case=True), state="*")
    dp.register_message_handler(handle_other_profile, lambda msg: msg.text.isdigit(), state="*")
