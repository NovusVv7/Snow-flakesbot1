
import os
import sqlite3
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ContextTypes
)

TOKEN = "7561318621:AAHLIMv1cQPXSkBYWkFCeys5XsXg2c4M3fc"  # –≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
ADMIN_ID = 6359584002  # –≤–∞—à ID –∏–ª–∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
GROUP_CHAT_ID = -1001234567890  # ID –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω

# –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('users.db', check_same_thread=False)
c = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
c.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    gender TEXT,
    is_vip INTEGER,
    is_admin INTEGER,
    last_active DATETIME
)
''')

c.execute('''
CREATE TABLE IF NOT EXISTS bans (
    user_id INTEGER PRIMARY KEY
)
''')

c.execute('''
CREATE TABLE IF NOT EXISTS vip_requests (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    requested_at DATETIME
)
''')

conn.commit()

# –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def update_last_active(user_id):
    c.execute(
        "UPDATE users SET last_active=? WHERE user_id=?",
        (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_id)
    )
    conn.commit()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
gender_keyboard = [
    [InlineKeyboardButton("üë© –î–µ–≤—É—à–∫–∞", callback_data='gender_–∂–µ–Ω—Å–∫–∏–π')],
    [InlineKeyboardButton("üë® –ú—É–∂—á–∏–Ω–∞", callback_data='gender_–º—É–∂—Å–∫–æ–π')]
]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    c.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    user_record = c.fetchone()
    if not user_record:
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:",
            reply_markup=InlineKeyboardMarkup(gender_keyboard)
        )
    else:
        await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    await update_last_active(user_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
async def gender_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    user_id = user.id
    gender = query.data.split('_')[1]

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    c.execute(
        "INSERT OR REPLACE INTO users (user_id, gender, is_vip, is_admin, last_active) VALUES (?, ?, ?, ?, ?)",
        (user_id, gender, 0, 1 if user_id == ADMIN_ID else 0, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    )
    conn.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª–∞
    keyboard = [[InlineKeyboardButton("‚ú® –•–æ—á—É VIP", callback_data='want_vip')]]
    await query.edit_message_text(
        f"‚úÖ –ü–æ–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {gender}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    await update_last_active(user_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ VIP
async def want_vip_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    user_id = user.id
    username = user.username or ''

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É
    c.execute(
        "INSERT OR REPLACE INTO vip_requests (user_id, username, requested_at) VALUES (?, ?, ?)",
        (user_id, username, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    )
    conn.commit()

    await query.answer("–ó–∞—è–≤–∫–∞ –Ω–∞ VIP –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
    await query.edit_message_text("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ VIP –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ /help, /start, /balance –∏ —Ç.–ø.
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start - –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
        "/balance - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/help - –ø–æ–º–æ—â—å\n\n"
        "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å '—Ö–æ—á—É VIP' –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞' –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç."
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∞–∫—Ü–∏–∏
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    user_id = update.effective_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    await update_last_active(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–Ω–µ
    c.execute("SELECT * FROM bans WHERE user_id=?", (user_id,))
    if c.fetchone():
        return  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—Ä–∞–∑—ã "—Ö–æ—á—É VIP"
    if "—Ö–æ—á—É vip" in text:
        c.execute("SELECT * FROM vip_requests WHERE user_id=?", (user_id,))
        if c.fetchone():
            await update.message.reply_text("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ VIP.")
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
            c.execute(
                "INSERT OR REPLACE INTO vip_requests (user_id, username, requested_at) VALUES (?, ?, ?)",
                (user_id, update.effective_user.username or '', datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
            )
            conn.commit()
            await update.message.reply_text("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ VIP –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–≤–∞ "–æ—Ç–º–µ–Ω–∞"
    if "–æ—Ç–º–µ–Ω–∞" in text:
        # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –∑–∞—è–≤–∫–∏
        # –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å—Ç–∞–≤–∫–∏/–∑–∞—è–≤–∫–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π
        # (–µ—Å–ª–∏ –µ—Å—Ç—å, –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è ‚Äî –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å)
        # –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await update.message.reply_text("–í—Å–µ —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞–≤–∫–∏ –∏ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.")
        return

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ /command –∏–ª–∏ /mine /roulette
async def command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if "/roulette" in text:
        await start_roulette(update, context)
    elif "/mine" in text:
        await start_mines(update, context)

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä—É–ª–µ—Ç–∫–∏
async def start_roulette(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    c.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    user = c.fetchone()
    if not user:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å /start")
        return

    # –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    balance = user[2]
    bet_amount = 20000

    if balance < bet_amount:
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω–µ–∂–∏–Ω–æ–∫ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
        return

    # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
    c.execute("UPDATE users SET last_active=? WHERE user_id=?", (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_id))
    conn.commit()

    # –ó–∞—Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞
    numbers = [2, 4, 6, 9, 14, 15, 17, 19, 20, 24, 25, 27, 29, 30, 33, 35]
    c.execute("UPDATE users SET is_vip=? WHERE user_id=?", (0, user_id))
    conn.commit()

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    c.execute("UPDATE users SET is_vip=0 WHERE user_id=?", (user_id,))
    c.execute("UPDATE users SET last_active=? WHERE user_id=?", (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_id))
    c.execute("UPDATE users SET last_active=? WHERE user_id=?", (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_id))
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    c.execute("UPDATE users SET last_active=? WHERE user_id=?", (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_id))
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    c.execute("UPDATE users SET last_active=? WHERE user_id=?", (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_id))
    conn.commit()

    # –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å
    c.execute("UPDATE users SET last_active=? WHERE user_id=?", (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_id))
    conn.commit()

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    c.execute("UPDATE users SET last_active=? WHERE user_id=?", (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_id))
    conn.commit()

    # –í—ã—Ä–µ–∑–∫–∞
    c.execute("UPDATE users SET last_active=? WHERE user_id=?", (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_id))
    conn.commit()

    # –í—ã—Ä–µ–∑–∫–∞
    c.execute("UPDATE users SET last_active=? WHERE user_id=?", (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_id))
    conn.commit()

    # –í—ã—Ä–µ–∑–∫–∞
    c.execute("UPDATE users SET last_active=? WHERE user_id=?", (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_id))
    conn.commit()

    # –í—ã—Ä–µ–∑–∫–∞
    c.execute("UPDATE users SET last_active=? WHERE user_id=?", (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_id))
    conn.commit()

    # –í—Ä–∞—â–µ–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏
    number = random.randint(0, 36)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if number in numbers:
        winnings = bet_amount * 35
        c.execute("UPDATE users SET balance=balance+? WHERE user_id=?", (winnings, user_id))
        await update.message.reply_text(f"–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {number}! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} —Å–Ω–µ–∂–∏–Ω–æ–∫! –ë–∞–ª–∞–Ω—Å: {winnings}")
    else:
        await update.message.reply_text(f"–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {number}. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ —Å—Ç–∞–≤–∫—É.")

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã "–ú–∏–Ω—ã"
async def start_mines(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    c.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    user = c.fetchone()
    if not user:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å /start")
        return

    balance = user[2]
    if balance < 5000:
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω–µ–∂–∏–Ω–æ–∫ –¥–ª—è –∏–≥—Ä—ã.")
        return

    # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
    c.execute("UPDATE users SET balance=balance-5000 WHERE user_id=?", (user_id,))
    conn.commit()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∏–Ω—ã
    mines = random.sample(range(1, 21), 3)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω—ã
    c.execute("INSERT OR REPLACE INTO users (user_id, gender, is_vip, is_admin, last_active) VALUES (?, ?, ?, ?, ?)",
              (user_id, '', 0, 0, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    conn.commit()
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –º–∏–Ω—ã –≤ –ø–∞–º—è—Ç–∏
    if not hasattr(context.bot_data, 'mines'):
        context.bot_data['mines'] = {}
    context.bot_data['mines'][user_id] = mines

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    for row in range(4):
        buttons = []
        for col in range(5):
            num = row * 5 + col + 1
            buttons.append(InlineKeyboardButton(str(num), callback_data=f"mine_{num}"))
        keyboard.append(buttons)

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —è—á–µ–π–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å:", reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –º–∏–Ω–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = update.effective_user.id

    if data.startswith('mine_'):
        cell = int(data.split('_')[1])
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω—ã
        mines = None
        if hasattr(context.bot_data, 'mines'):
            mines = context.bot_data['mines'].get(user_id)
        if not mines:
            await query.edit_message_text("–ò–≥—Ä–∞ –º–∏–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∏–Ω–∞
        if cell in mines:
            # –ú–∏–Ω–∞ ‚Äî –ø—Ä–æ–∏–≥—Ä—ã—à
            c.execute("UPDATE users SET balance=balance-5000 WHERE user_id=?", (user_id,))
            conn.commit()
            await query.edit_message_text("–ú–∏–Ω–∞! –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ 5000 —Å–Ω–µ–∂–∏–Ω–æ–∫.")
        else:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ ‚Äî –≤—ã–∏–≥—Ä—ã—à
            c.execute("UPDATE users SET balance=balance+15000 WHERE user_id=?", (user_id,))
            conn.commit()
            await query.edit_message_text("–ë–µ–∑–æ–ø–∞—Å–Ω–æ! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 15000 —Å–Ω–µ–∂–∏–Ω–æ–∫.")
        # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É
        del context.bot_data['mines'][user_id]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/mine - –∏–≥—Ä–∞—Ç—å –≤ –º–∏–Ω–∏-–∏–≥—Ä—É\n"
        "/roulette - –Ω–∞—á–∞—Ç—å —Ä—É–ª–µ—Ç–∫—É\n"
        "–ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å '—Ö–æ—á—É VIP' –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π."
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("balance", lambda update, context: update.message.reply_text("–í–∞—à –±–∞–ª–∞–Ω—Å: ...")))  # –º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å
    application.add_handler(CommandHandler("mine", start_mines))
    application.add_handler(CommandHandler("roulette", start_roulette))
    application.add_handler(CallbackQueryHandler(gender_handler))
    application.add_handler(CallbackQueryHandler(want_vip_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, command_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    application.run_polling()

import asyncio
asyncio.run(main())